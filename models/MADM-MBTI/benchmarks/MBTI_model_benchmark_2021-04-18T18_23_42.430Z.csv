Execution;Time in ms in Scope #571104 (in ExperimentPlan);Invocations in Scope #571104 (in ExperimentPlan);Time in ms in Scope #571105 of MBTI(0);Invocations in Scope #571105 of MBTI(0);Time in ms in Scope #571110 of MBTI_model(0) (of display map);Invocations in Scope #571110 of MBTI_model(0) (of display map);Time in ms in Scope #571112 of MBTI_model(0) (in java2D display );Invocations in Scope #571112 of MBTI_model(0) (in java2D display );Time in ms in Scope #571107 of MBTI_model(0);Invocations in Scope #571107 of MBTI_model(0)
model MBTI

global ;;;;;;;;;;
list<MBTI_model> peers ;;;;;;;;;0;1
-199;;;;;;;;;;
agent host ;;;;;;;;;0;1
-29;;;;;;;;;;
experiment experiment ;;;;;;;;;0;1
-31;;;;;;;;;;
MBTI_model world ;;;;;;;;;0;1
-27;;;;;;;;;;
int nbsellers ;;;;;;;;;0;1
int nbbuyers ;;;;;;;;;0;1
bool turn_off_time ;;;;;;;;;0;1
bool turn_off_personality_probability ;;;;;;;;;0;1
list<point> visited_target ;;;;;;;;;0;1
int steps <- 0 ;;;;;;;;;0;1
int max_steps <- 5 ;;;;;;;;;0;1
geometry shape <- square(float(500)) ;;;;;;;;;0;1
square(float(500));;;;;;;;;0;1
float(500);;;;;;;;;0;1
map<string, string> PARAMS <-  ['dbtype'::'sqlite','database'::'../../db/mas-mbti-recruitment.db']  ;;;;;;;;;0;1
 ['dbtype'::'sqlite','database'::'../../db/mas-mbti-recruitment.db'] ;;;;;;;;;0;1
list<sellers> sellers ;;;;;;;;;1;1
list<buyers> buyers ;;;;;;;;;0;1
list<grille> grille ;;;;;;;;;109;1
species sellers skills: [moving, SQLSKILL] control: simple_bdi ;;;;;;;;;58581;6
[moving,SQLSKILL];;;;;;;;;;
list<sellers> peers ;;;;;;;;;0;16
-199;;;;;;;;;;
MBTI_model host ;;;;;;;;;0;16
-29;;;;;;;;;;
float charisma <- 1.0 ;;;;;;;;;0;16
list<unknown> law_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
bool use_social_architecture <- false ;;;;;;;;;0;16
float agreeableness <- 0.5 ;;;;;;;;;0;16
list<unknown> thinking <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
unknown current_norm ;;;;;;;;;0;16
list<mental_state> belief_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
bool probabilistic_choice <- false ;;;;;;;;;0;16
list<Sanction> sanction_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
float conscientiousness <- 0.5 ;;;;;;;;;0;16
list<mental_state> uncertainty_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
float neurotism <- 0.5 ;;;;;;;;;0;16
list<mental_state> ideal_base <- [] ;;;;;;;;;1;16
[];;;;;;;;;1;1508
list<emotion> emotion_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
float extroversion <- 0.5 ;;;;;;;;;0;16
bool use_norms <- false ;;;;;;;;;0;16
list<BDIPlan> plan_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
float openness <- 0.5 ;;;;;;;;;0;16
list<Norm> norm_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
bool use_personality <- false ;;;;;;;;;0;16
float obedience <- 1.0 ;;;;;;;;;0;16
list<social_link> social_link_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
unknown current_plan ;;;;;;;;;0;16
float plan_persistence <- 1.0 ;;;;;;;;;0;16
list<mental_state> intention_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
bool use_persistence <- false ;;;;;;;;;0;16
list<mental_state> obligation_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
float receptivity <- 1.0 ;;;;;;;;;0;16
list<mental_state> desire_base <- [] ;;;;;;;;;0;16
[];;;;;;;;;1;1508
bool use_emotions_architecture <- false ;;;;;;;;;0;16
float intention_persistence <- 1.0 ;;;;;;;;;0;16
path current_path <- nil ;;;;;;;;;0;16
point location ;;;;;;;;;0;16
point destination ;;;;;;;;;0;16
float real_speed <- 0.0 ;;;;;;;;;0;16
float speed <- 1.0 ;;;;;;;;;0;16
geometry current_edge <- nil ;;;;;;;;;0;16
float heading <- rnd(360.0) ;;;;;;;;;0;16
rnd(360.0);;;;;;;;;0;116
float viewdist_sellers <- 100.0 ;;;;;;;;;0;16
float viewdist_buyers <- 50.0 ;;;;;;;;;0;16
int count_people_around <- 0 ;;;;;;;;;0;16
bool got_buyer <- false ;;;;;;;;;0;16
string my_personality ;;;;;;;;;0;16
list my_real_personality ;;;;;;;;;0;16
list<string> my_current_personality ;;;;;;;;;0;16
string E_I ;;;;;;;;;0;16
bool is_extroverted ;;;;;;;;;0;16
string S_N ;;;;;;;;;0;16
bool is_sensing ;;;;;;;;;0;16
string T_F ;;;;;;;;;0;16
bool is_thinking ;;;;;;;;;0;16
string J_P ;;;;;;;;;0;16
bool is_judging ;;;;;;;;;0;16
bool already_visited_cluster <- false ;;;;;;;;;0;16
rgb color ;;;;;;;;;0;16
predicate define_item_target <- new_predicate('define_item_target') ;;;;;;;;;0;16
new_predicate('define_item_target');;;;;;;;;0;16
predicate define_buyer_target <- new_predicate('define_buyer_target') ;;;;;;;;;0;16
new_predicate('define_buyer_target');;;;;;;;;0;16
predicate sell_item <- new_predicate('sell_item') ;;;;;;;;;0;16
new_predicate('sell_item');;;;;;;;;0;16
predicate say_something <- new_predicate('say_something') ;;;;;;;;;0;16
new_predicate('say_something');;;;;;;;;0;16
predicate wander <- new_predicate('wander') ;;;;;;;;;1;16
new_predicate('wander');;;;;;;;;0;16
predicate met_buyer <- new_predicate('met_buyer') ;;;;;;;;;0;16
new_predicate('met_buyer');;;;;;;;;0;16
point target ;;;;;;;;;0;16
point new_target ;;;;;;;;;0;16
list<point> perceived_buyers ;;;;;;;;;0;16
list<point> sellers_in_my_view ;;;;;;;;;0;16
list<point> possible_buyers ;;;;;;;;;0;16
float min_distance_to_exclude <- 50.0 ;;;;;;;;;0;16
float weight_e_i <- 1 / 3 ;;;;;;;;;0;16
1 / 3;;;;;;;;;0;16
float weight_s_n <- 1 / 3 ;;;;;;;;;0;16
1 / 3;;;;;;;;;0;16
float weight_t_f <- 1 / 3 ;;;;;;;;;0;16
1 / 3;;;;;;;;;0;16
int cluster_distance <- 30 ;;;;;;;;;0;16
date start_time ;;;;;;;;;0;16
date end_time ;;;;;;;;;0;16
int number_of_visited_buyers <- 0 ;;;;;;;;;0;16
list select (10 params, 4 select, 5 values);;;;;;;;;;
mental_state get_belief_with_name (4 name);;;;;;;;;;
float get_normalized_values (float value, map<buyers, float> buyers_values, string criteria_type);;;;;;;;;40;5390
arg value type: float ;;;;;;;;;0;5390
arg buyers_values type: map<buyers, float> ;;;;;;;;;0;5390
arg criteria_type type: string ;;;;;;;;;0;5390
if criteria_type = 'cost' ;;;;;;;;;20;5390
criteria_type = 'cost';;;;;;;;;2;5390
else ;;;;;;;;;3;1415
return abs(value / max(buyers_values)) ;;;;;;;;;3;1415
abs(value / max(buyers_values));;;;;;;;;3;1415
value / max(buyers_values);;;;;;;;;3;1415
max(buyers_values);;;;;;;;;3;1415
return (value > 0) ? abs(min(buyers_values) / value) : 1.0 ;;;;;;;;;11;3975
(value > 0) ? abs(min(buyers_values) / value) : 1.0;;;;;;;;;8;3975
value > 0;;;;;;;;;2;3975
abs(min(buyers_values) / value) : 1.0;;;;;;;;;;
abs(min(buyers_values) / value);;;;;;;;;5;3140
min(buyers_values) / value;;;;;;;;;4;3140
min(buyers_values);;;;;;;;;3;3140
bool add_belief (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
social_link get_social_link_with_agent (11 agent);;;;;;;;;;
mental_state get_obligation (546704 predicate);;;;;;;;;;
bool remove_intention (546704 predicate, 3 desire_also);;;;;;;;;4;1160
bool remove_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_beliefs_with_name (4 name);;;;;;;;;;
bool remove_desire_mental_state (546708 mental_state);;;;;;;;;;
bool remove_ideal (546704 predicate);;;;;;;;;;
bool add_desire_mental_state (546708 mental_state, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
bool remove_intention_mental_state (546708 mental_state, 3 desire_also);;;;;;;;;;
action init (list<string> mbti_personality);;;;;;;;;1537;16
arg mbti_personality type: list<string> ;;;;;;;;;0;16
set my_personality value: string(mbti_personality) ;;;;;;;;;0;16
string(mbti_personality);;;;;;;;;0;16
set my_current_personality value: mbti_personality ;;;;;;;;;0;16
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_E_I');;;;;;;;;311;16
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_S_N');;;;;;;;;307;16
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_T_F');;;;;;;;;304;16
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_TARGET');;;;;;;;;309;16
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SELLER_PRODUCTIVITY');;;;;;;;;306;16
do define_personality (mbti_personality:mbti_personality);;;;;;;;;0;16
self.define_personality(mbti_personality:mbti_personality);;;;;;;;;;
do add_desire (predicate:wander);;;;;;;;;0;16
self.add_desire(predicate:wander);;;;;;;;;;
mental_state get_belief_mental_state (546708 mental_state);;;;;;;;;;
bool change_liking (11 agent, 2 liking);;;;;;;;;;
bool testConnection (10 params);;;;;;;;;;
list get_beliefs (546704 predicate);;;;;;;;;7;1520
bool add_belief_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
action define_personality (list<string> mbti_personality);;;;;;;;;0;16
arg mbti_personality type: list<string> ;;;;;;;;;0;16
set E_I value: mbti_personality at 0 ;;;;;;;;;0;16
mbti_personality at 0;;;;;;;;;0;16
set S_N value: mbti_personality at 1 ;;;;;;;;;0;16
mbti_personality at 1;;;;;;;;;0;16
set T_F value: mbti_personality at 2 ;;;;;;;;;0;16
mbti_personality at 2;;;;;;;;;0;16
set J_P value: mbti_personality at 3 ;;;;;;;;;0;16
mbti_personality at 3;;;;;;;;;0;16
set is_extroverted value: (E_I = 'E') ? flip(0.8) : flip(0.2) ;;;;;;;;;0;16
(E_I = 'E') ? flip(0.8) : flip(0.2);;;;;;;;;0;16
E_I = 'E';;;;;;;;;0;16
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);;;;;;;;;0;8
flip(0.2);;;;;;;;;0;8
set is_sensing value: (S_N = 'S') ? flip(0.8) : flip(0.2) ;;;;;;;;;0;16
(S_N = 'S') ? flip(0.8) : flip(0.2);;;;;;;;;0;16
S_N = 'S';;;;;;;;;0;16
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);;;;;;;;;0;8
flip(0.2);;;;;;;;;0;8
set is_thinking value: (T_F = 'T') ? flip(0.8) : flip(0.2) ;;;;;;;;;0;16
(T_F = 'T') ? flip(0.8) : flip(0.2);;;;;;;;;0;16
T_F = 'T';;;;;;;;;0;16
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);;;;;;;;;0;8
flip(0.2);;;;;;;;;0;8
set is_judging value: (J_P = 'J') ? flip(0.8) : flip(0.2) ;;;;;;;;;0;16
(J_P = 'J') ? flip(0.8) : flip(0.2);;;;;;;;;0;16
J_P = 'J';;;;;;;;;0;16
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);;;;;;;;;0;8
flip(0.2);;;;;;;;;0;8
set my_real_personality value: [] ;;;;;;;;;0;16
[];;;;;;;;;0;16
add is_extroverted ? 'E' : 'I' to: my_real_personality ;;;;;;;;;0;16
is_extroverted ? 'E' : 'I';;;;;;;;;0;16
'E' : 'I';;;;;;;;;;
add is_sensing ? 'S' : 'N' to: my_real_personality ;;;;;;;;;0;16
is_sensing ? 'S' : 'N';;;;;;;;;0;16
'S' : 'N';;;;;;;;;;
add is_thinking ? 'T' : 'F' to: my_real_personality ;;;;;;;;;0;16
is_thinking ? 'T' : 'F';;;;;;;;;0;16
'T' : 'F';;;;;;;;;;
add is_judging ? 'J' : 'P' to: my_real_personality ;;;;;;;;;0;16
is_judging ? 'J' : 'P';;;;;;;;;0;16
'J' : 'P';;;;;;;;;;
set color value: #green ;;;;;;;;;0;16
bool add_directly_uncertainty (546708 uncertainty);;;;;;;;;;
mental_state get_intention (546704 predicate);;;;;;;;;;
bool clear_desires ;;;;;;;;;;
mental_state get_desire_mental_state (546708 mental_state);;;;;;;;;;
bool add_desire (546704 predicate, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;0;16
action wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;
bool has_social_link (546707 social_link);;;;;;;;;;
bool has_belief_with_name (4 name);;;;;;;;;;
list get_intentions_mental_state (546708 mental_state);;;;;;;;;;
bool add_uncertainty_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link (546707 social_link);;;;;;;;;;
bool change_dominance (11 agent, 2 dominance);;;;;;;;;;
bool remove_ideal_mental_state (546708 mental_state);;;;;;;;;;
social_link get_social_link (546707 social_link);;;;;;;;;;
mental_state get_belief_emotion (546706 emotion);;;;;;;;;;
bool add_belief_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_social_links ;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);;;;;;;;;;
bool clear_beliefs ;;;;;;;;;;
bool change_solidarity (11 agent, 2 solidarity);;;;;;;;;;
bool clear_uncertainties ;;;;;;;;;;
bool add_uncertainty_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_ideals ;;;;;;;;;;
bool is_current_intention_mental_state (546708 mental_state);;;;;;;;;;
bool add_intention_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
action get_desires_with_name (4 name);;;;;;;;;;
mental_state get_ideal_mental_state (546708 mental_state);;;;;;;;;;
bool has_uncertainty (546704 predicate);;;;;;;;;;
bool is_current_intention (546704 predicate);;;;;;;;;;
bool current_intention_on_hold (0 until);;;;;;;;;0;96
bool add_directly_ideal (546708 ideal);;;;;;;;;;
mental_state get_desire_with_name (4 name);;;;;;;;;;
bool has_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_intentions (546704 predicate);;;;;;;;;;
action get_plans ;;;;;;;;;;
string getCurrentDateTime (4 dateFormat);;;;;;;;;;
int timeStamp ;;;;;;;;;;
bool has_obligation (546704 predicate);;;;;;;;;;
bool add_ideal_emotion (546706 emotion, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool remove_emotion (546706 emotion);;;;;;;;;;
bool add_emotion (546706 emotion);;;;;;;;;;
list get_desires_mental_state (546708 mental_state);;;;;;;;;;
bool remove_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
mental_state get_desire (546704 predicate);;;;;;;;;;
list get_sellers_from_points (list list_of_points);;;;;;;;;0;80
arg list_of_points type: list ;;;;;;;;;0;80
let list_of_sellers type: list<sellers> ;;;;;;;;;0;80
loop seller over: list_of_points ;;;;;;;;;0;80
add sellers(seller) to: list_of_sellers ;;;;;;;;;0;80
sellers(seller);;;;;;;;;0;80
return list_of_sellers ;;;;;;;;;0;80
matrix list2Matrix (5 param, 3 getName, 3 getType);;;;;;;;;;
list get_buyers_from_points (list list_of_points);;;;;;;;;15;240
arg list_of_points type: list ;;;;;;;;;0;240
let list_of_buyers type: list<buyers> ;;;;;;;;;0;240
loop buyer over: list_of_points ;;;;;;;;;13;240
add buyers(buyer) to: list_of_buyers ;;;;;;;;;11;2700
buyers(buyer);;;;;;;;;8;2700
return list_of_buyers ;;;;;;;;;0;240
bool has_emotion (546706 emotion);;;;;;;;;;
bool remove_uncertainty (546704 predicate);;;;;;;;;;
mental_state get_intention_mental_state (546708 mental_state);;;;;;;;;;
bool has_emotion_with_name (4 name);;;;;;;;;;
bool has_desire (546704 predicate);;;;;;;;;;
string getDateOffset (4 dateFormat, 4 dateStr, 4 offset);;;;;;;;;;
bool clear_obligations ;;;;;;;;;;
BDIPlan get_current_plan ;;;;;;;;;;
bool add_ideal_mental_state (546708 mental_state, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool clear_emotions ;;;;;;;;;;
bool add_directly_desire (546708 desire);;;;;;;;;;
bool has_ideal_mental_state (546708 mental_state);;;;;;;;;;
map<buyers, float> get_distances_norm (list<buyers> buyers_in_my_view);;;;;;;;;;
arg buyers_in_my_view type: list<buyers> ;;;;;;;;;;
return map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each))) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each)));;;;;;;;;;
buyers_in_my_view collect (each :: distance_to(self,each));;;;;;;;;;
each :: distance_to(self,each);;;;;;;;;;
distance_to(self,each);;;;;;;;;;
list get_desires (546704 predicate);;;;;;;;;;
bool add_obligation (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
action persist_seller_action (buyers buyer_target, point location_target);;;;;;;;;;
arg buyer_target type: buyers ;;;;;;;;;;
arg location_target type: point ;;;;;;;;;;
do insert (params:PARAMS, into:'TB_SELLER_PRODUCTIVITY', columns:['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'], values:[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers]);;;;;;;;;;
self.insert(params:PARAMS, into:'TB_SELLER_PRODUCTIVITY', columns:['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'], values:[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers]);;;;;;;;;;
['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'];;;;;;;;;;
[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
string(self.my_real_personality);;;;;;;;;;
self.my_real_personality;;;;;;;;;;
int(is_extroverted);;;;;;;;;;
int(is_sensing);;;;;;;;;;
int(is_thinking);;;;;;;;;;
int(is_judging);;;;;;;;;;
self.number_of_visited_buyers;;;;;;;;;;
bool remove_social_link_with_agent (11 agent);;;;;;;;;;
action get_thinking_feeling_score (list list_of_points);;;;;;;;;18679;80
arg list_of_points type: list ;;;;;;;;;0;80
let score_t_f type: map<buyers, float> ;;;;;;;;;0;80
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;;;;;;;;;5;80
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
let sellers_perceived type: list value: self.get_sellers_from_points(list_of_points:sellers_in_my_view) ;;;;;;;;;0;80
self.get_sellers_from_points(list_of_points:sellers_in_my_view);;;;;;;;;;
let buyers_distance_to_me type: map<buyers, float> ;;;;;;;;;0;80
let buyers_distance_norm type: map<buyers, float> ;;;;;;;;;0;80
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;;;;;;;;;4;80
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;;;;;;;;;11;80
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));;;;;;;;;11;80
buyers_distance_to_me.pairs;;;;;;;;;0;80
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;;;;;;;;;1;900
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let inc_num_sellers_close_to_buyer type: float value: 0.0 ;;;;;;;;;0;80
let num_sellers_close_to_buyer type: map<buyers, float> ;;;;;;;;;0;80
loop buyer over: buyers_in_my_view ;;;;;;;;;8;80
loop seller over: sellers_perceived ;;;;;;;;;3;900
if distance_to(point(seller),point(buyer)) < min_distance_to_exclude ;;;;;;;;;3;900
distance_to(point(seller),point(buyer)) < min_distance_to_exclude;;;;;;;;;3;900
distance_to(point(seller),point(buyer));;;;;;;;;3;900
point(seller);;;;;;;;;2;900
point(buyer);;;;;;;;;1;900
set inc_num_sellers_close_to_buyer value: inc_num_sellers_close_to_buyer + 1.0 ;;;;;;;;;0;65
inc_num_sellers_close_to_buyer + 1.0;;;;;;;;;0;65
add buyer :: inc_num_sellers_close_to_buyer to: num_sellers_close_to_buyer ;;;;;;;;;4;900
buyer :: inc_num_sellers_close_to_buyer;;;;;;;;;0;900
set inc_num_sellers_close_to_buyer value: 0.0 ;;;;;;;;;0;900
let sellers_close_to_buyer_weight type: float ;;;;;;;;;0;80
let distance_weight type: float ;;;;;;;;;0;80
set sellers_close_to_buyer_weight value: !self.is_thinking ? 0.8 : 0.2 ;;;;;;;;;2;80
!self.is_thinking ? 0.8 : 0.2;;;;;;;;;2;80
!self.is_thinking;;;;;;;;;2;80
self.is_thinking;;;;;;;;;2;80
0.8 : 0.2;;;;;;;;;;
set distance_weight value: 1 - sellers_close_to_buyer_weight ;;;;;;;;;0;80
1 - sellers_close_to_buyer_weight;;;;;;;;;0;80
let num_sellers_close_to_buyer_norm type: map<buyers, float> ;;;;;;;;;0;80
set num_sellers_close_to_buyer_norm value: num_sellers_close_to_buyer.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost'))) ;;;;;;;;;11;80
num_sellers_close_to_buyer.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost')));;;;;;;;;10;80
num_sellers_close_to_buyer.pairs;;;;;;;;;0;80
each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost'));;;;;;;;;;
each.key;;;;;;;;;1;900
self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
set score_t_f value: buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight))) ;;;;;;;;;2;80
buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight)));;;;;;;;;2;80
buyers_distance_norm.pairs;;;;;;;;;0;80
each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight));;;;;;;;;;
each.key;;;;;;;;;0;900
(each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight);;;;;;;;;2;900
each.value * distance_weight;;;;;;;;;0;900
each.value;;;;;;;;;0;900
num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight;;;;;;;;;2;900
num_sellers_close_to_buyer_norm[each.key];;;;;;;;;2;900
[each.key];;;;;;;;;2;900
each.key;;;;;;;;;0;900
loop buyer over: score_t_f.pairs ;;;;;;;;;18635;80
score_t_f.pairs;;;;;;;;;1;80
do insert (params:PARAMS, into:'TB_SCORE_T_F', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'], values:[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value]);;;;;;;;;18626;900
self.insert(params:PARAMS, into:'TB_SCORE_T_F', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'], values:[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
num_sellers_close_to_buyer[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
num_sellers_close_to_buyer_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
return score_t_f ;;;;;;;;;1;80
list remove_visited_target (list list_of_points);;;;;;;;;1;80
arg list_of_points type: list ;;;;;;;;;0;80
remove visited_target to: list_of_points all: true ;;;;;;;;;0;80
return list_of_points ;;;;;;;;;0;80
bool add_intention (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
mental_state get_belief (546704 predicate);;;;;;;;;;
list get_beliefs_metal_state (546708 mental_state);;;;;;;;;;
action get_intentions_with_name (4 name);;;;;;;;;;
bool has_desire_with_name (4 name);;;;;;;;;;
mental_state get_uncertainty (546704 predicate);;;;;;;;;;
list get_biggest_cluster (list buyers_in_my_view);;;;;;;;;;
arg buyers_in_my_view type: list ;;;;;;;;;;
let clusters type: list<list<buyers>> value: list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance))) ;;;;;;;;;;
list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance)));;;;;;;;;;
simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance));;;;;;;;;;
float(cluster_distance);;;;;;;;;;
return clusters with_max_of length(each) ;;;;;;;;;;
clusters with_max_of length(each);;;;;;;;;;
length(each);;;;;;;;;;
map<buyers, float> calculate_score (list<point> buyers_to_calculate);;;;;;;;;56770;80
arg buyers_to_calculate type: list<point> ;;;;;;;;;0;80
benchmark 'Benchmark of closest_to operator' ;;;;;;;;;56770;80
set start_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;1;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
let buyers_e_i_score type: map<buyers, float> ;;;;;;;;;0;80
set buyers_e_i_score value: self.get_extroversion_introversion_score(list_of_points:buyers_to_calculate) ;;;;;;;;;18922;80
self.get_extroversion_introversion_score(list_of_points:buyers_to_calculate);;;;;;;;;;
set end_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;1;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
if !turn_off_time ;;;;;;;;;2;80
!turn_off_time;;;;;;;;;2;80
write 'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time) ;;;;;;;;;;
'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time);;;;;;;;;;
milliseconds_between(start_time,end_time);;;;;;;;;;
set start_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;1;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
let buyers_s_n_score type: map<buyers, float> ;;;;;;;;;1;80
set buyers_s_n_score value: self.get_sensing_intuition_score(list_of_points:buyers_to_calculate) ;;;;;;;;;19101;80
self.get_sensing_intuition_score(list_of_points:buyers_to_calculate);;;;;;;;;;
set end_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;1;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
if !turn_off_time ;;;;;;;;;0;80
!turn_off_time;;;;;;;;;0;80
write 'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time) ;;;;;;;;;;
'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time);;;;;;;;;;
milliseconds_between(start_time,end_time);;;;;;;;;;
set start_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;0;80
turn_off_time ? #nan : date('now');;;;;;;;;0;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
let buyers_t_f_score type: map<buyers, float> ;;;;;;;;;0;80
set buyers_t_f_score value: self.get_thinking_feeling_score(list_of_points:possible_buyers) ;;;;;;;;;18680;80
self.get_thinking_feeling_score(list_of_points:possible_buyers);;;;;;;;;;
set end_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;1;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
if !turn_off_time ;;;;;;;;;1;80
!turn_off_time;;;;;;;;;0;80
write 'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time) ;;;;;;;;;;
'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time);;;;;;;;;;
milliseconds_between(start_time,end_time);;;;;;;;;;
set start_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;1;80
turn_off_time ? #nan : date('now');;;;;;;;;0;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
let buyers_score type: map<buyers, float> ;;;;;;;;;1;80
set buyers_score value: map<buyers, float>(buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f)))) ;;;;;;;;;11;80
map<buyers, float>(buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f))));;;;;;;;;11;80
buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f)));;;;;;;;;11;80
buyers_e_i_score.pairs;;;;;;;;;1;80
each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f));;;;;;;;;10;900
each.key;;;;;;;;;1;900
((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f);;;;;;;;;8;900
(each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n);;;;;;;;;7;900
each.value * weight_e_i;;;;;;;;;1;900
each.value;;;;;;;;;0;900
buyers_s_n_score[each.key] * weight_s_n;;;;;;;;;4;900
buyers_s_n_score[each.key];;;;;;;;;3;900
[each.key];;;;;;;;;1;900
each.key;;;;;;;;;1;900
buyers_t_f_score[each.key] * weight_t_f;;;;;;;;;1;900
buyers_t_f_score[each.key];;;;;;;;;1;900
[each.key];;;;;;;;;0;900
each.key;;;;;;;;;0;900
set end_time value: turn_off_time ? #nan : date('now') ;;;;;;;;;0;80
turn_off_time ? #nan : date('now');;;;;;;;;0;80
#nan : date('now');;;;;;;;;;
date('now');;;;;;;;;;
if !turn_off_time ;;;;;;;;;0;80
!turn_off_time;;;;;;;;;0;80
write 'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time) ;;;;;;;;;;
'get_extroversion_introversion_score: ' + milliseconds_between(start_time,end_time);;;;;;;;;;
milliseconds_between(start_time,end_time);;;;;;;;;;
return buyers_score ;;;;;;;;;0;80
bool add_directly_belief (546708 belief);;;;;;;;;;
bool replace_belief (546704 old_predicate, 546704 predicate);;;;;;;;;;
BDIPlan get_plan (4 name);;;;;;;;;;
bool has_belief (546704 predicate);;;;;;;;;;
int executeUpdate (10 params, 4 updateComm, 5 values);;;;;;;;;1537;80
mental_state get_current_intention ;;;;;;;;;0;96
bool add_intention_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
map<buyers, float> get_buyers_size (list<buyers> buyers_in_my_view);;;;;;;;;3;80
arg buyers_in_my_view type: list<buyers> ;;;;;;;;;0;80
return map<buyers, float>(buyers_in_my_view collect (each :: each.qty_buyers)) ;;;;;;;;;3;80
map<buyers, float>(buyers_in_my_view collect (each :: each.qty_buyers));;;;;;;;;3;80
buyers_in_my_view collect (each :: each.qty_buyers);;;;;;;;;3;80
each :: each.qty_buyers;;;;;;;;;2;900
each.qty_buyers;;;;;;;;;1;900
emotion get_emotion (546706 emotion);;;;;;;;;;
bool has_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool remove_desire (546704 predicate);;;;;;;;;;
mental_state get_intention_with_name (4 name);;;;;;;;;;
int insert (10 params, 4 into, 5 columns, 5 values);;;;;;;;;57984;2780
bool remove_belief (546704 predicate);;;;;;;;;4;1440
bool has_uncertainty_with_name (4 name);;;;;;;;;;
bool add_social_link (546707 social_link);;;;;;;;;;
bool add_ideal (546704 predicate, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool add_uncertainty (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
action get_judging_perceiving_score (list<point> buyers_to_calculate);;;;;;;;;;
arg buyers_to_calculate type: list<point> ;;;;;;;;;;
let new_buyers_score type: map<buyers, float> ;;;;;;;;;;
set new_buyers_score value: self.calculate_score(buyers_to_calculate:possible_buyers) ;;;;;;;;;;
self.calculate_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if !empty(new_buyers_score) ;;;;;;;;;;
!empty(new_buyers_score);;;;;;;;;;
empty(new_buyers_score);;;;;;;;;;
let max_buyer_score type: map<buyers, float> value: self.get_max_score(buyer_score:new_buyers_score) ;;;;;;;;;;
self.get_max_score(buyer_score:new_buyers_score);;;;;;;;;;
set new_target value: point(max_buyer_score.keys[0]) ;;;;;;;;;;
point(max_buyer_score.keys[0]);;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
if target != point(max_buyer_score.keys[0]) ;;;;;;;;;;
target != point(max_buyer_score.keys[0]);;;;;;;;;;
point(max_buyer_score.keys[0]);;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
set target value: new_target ;;;;;;;;;;
do goto (target:target);;;;;;;;;;
do insert (params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
self.insert(params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'];;;;;;;;;;
[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
max_buyer_score.values[0];;;;;;;;;;
max_buyer_score.values;;;;;;;;;;
[0];;;;;;;;;;
bool has_social_link_with_agent (11 agent);;;;;;;;;;
bool remove_all_beliefs (546704 predicate);;;;;;;;;;
map<buyers, float> get_distances (list<buyers> buyers_in_my_view);;;;;;;;;8;240
arg buyers_in_my_view type: list<buyers> ;;;;;;;;;0;240
return map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each))) ;;;;;;;;;8;240
map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each)));;;;;;;;;8;240
buyers_in_my_view collect (each :: distance_to(self,each));;;;;;;;;6;240
each :: distance_to(self,each);;;;;;;;;5;2700
distance_to(self,each);;;;;;;;;1;2700
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;
bool has_ideal_with_name (4 name);;;;;;;;;;
bool change_familiarity (11 agent, 2 familiarity);;;;;;;;;;
action get_extroversion_introversion_score (list list_of_points);;;;;;;;;18921;80
arg list_of_points type: list ;;;;;;;;;0;80
let score_e_i type: map<buyers, float> ;;;;;;;;;0;80
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;;;;;;;;;4;80
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
if length(buyers_in_my_view) = 1 ;;;;;;;;;18917;80
length(buyers_in_my_view) = 1;;;;;;;;;0;80
length(buyers_in_my_view);;;;;;;;;0;80
else ;;;;;;;;;18917;80
set buyers_in_my_view value: reverse(buyers_in_my_view sort_by distance_to(each,self)) ;;;;;;;;;4;80
reverse(buyers_in_my_view sort_by distance_to(each,self));;;;;;;;;4;80
buyers_in_my_view sort_by distance_to(each,self);;;;;;;;;4;80
distance_to(each,self);;;;;;;;;3;4650
let buyers_distance_to_me type: map<buyers, float> ;;;;;;;;;0;80
let buyers_distance_norm type: map<buyers, float> ;;;;;;;;;0;80
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;;;;;;;;;1;80
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;;;;;;;;;9;80
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));;;;;;;;;9;80
buyers_distance_to_me.pairs;;;;;;;;;1;80
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;;;;;;;;;0;900
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let buyers_size type: map<buyers, float> ;;;;;;;;;0;80
let buyers_size_norm type: map<buyers, float> ;;;;;;;;;0;80
set buyers_size value: self.get_buyers_size(buyers_in_my_view:buyers_in_my_view) ;;;;;;;;;3;80
self.get_buyers_size(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
let criteria_type type: string ;;;;;;;;;0;80
set criteria_type value: !self.is_extroverted ? 'cost' : 'benefit' ;;;;;;;;;0;80
!self.is_extroverted ? 'cost' : 'benefit';;;;;;;;;0;80
!self.is_extroverted;;;;;;;;;0;80
self.is_extroverted;;;;;;;;;0;80
'cost' : 'benefit';;;;;;;;;;
set buyers_size_norm value: buyers_size.pairs as_map (each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type))) ;;;;;;;;;8;80
buyers_size.pairs as_map (each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type)));;;;;;;;;8;80
buyers_size.pairs;;;;;;;;;0;80
each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type));;;;;;;;;;
each.key;;;;;;;;;0;900
float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type));;;;;;;;;7;900
self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type);;;;;;;;;;
each.value;;;;;;;;;;
set score_e_i value: buyers_distance_norm.pairs as_map (each.key :: (each.value + buyers_size_norm[each.key])) ;;;;;;;;;3;80
buyers_distance_norm.pairs as_map (each.key :: (each.value + buyers_size_norm[each.key]));;;;;;;;;3;80
buyers_distance_norm.pairs;;;;;;;;;0;80
each.key :: (each.value + buyers_size_norm[each.key]);;;;;;;;;;
each.key;;;;;;;;;3;900
each.value + buyers_size_norm[each.key];;;;;;;;;0;900
each.value;;;;;;;;;0;900
buyers_size_norm[each.key];;;;;;;;;0;900
[each.key];;;;;;;;;0;900
each.key;;;;;;;;;0;900
loop buyer over: score_e_i.pairs ;;;;;;;;;18888;80
score_e_i.pairs;;;;;;;;;0;80
do insert (params:PARAMS, into:'TB_SCORE_E_I', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'], values:[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value]);;;;;;;;;18882;900
self.insert(params:PARAMS, into:'TB_SCORE_E_I', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'], values:[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).qty_buyers;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
int(self.is_extroverted);;;;;;;;;;
self.is_extroverted;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_size_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
return score_e_i ;;;;;;;;;0;80
set score_e_i value: map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0)) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0));;;;;;;;;;
buyers_in_my_view collect (first([each]) :: 1.0);;;;;;;;;;
first([each]) :: 1.0;;;;;;;;;;
first([each]);;;;;;;;;;
[each];;;;;;;;;;
bool add_desire_emotion (546706 emotion, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
action get_sensing_intuition_score (list list_of_points);;;;;;;;;19099;80
arg list_of_points type: list ;;;;;;;;;0;80
let score_s_n type: map<buyers, float> ;;;;;;;;;0;80
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;;;;;;;;;6;80
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
if length(buyers_in_my_view) = 1 ;;;;;;;;;19093;80
length(buyers_in_my_view) = 1;;;;;;;;;0;80
length(buyers_in_my_view);;;;;;;;;0;80
else ;;;;;;;;;19093;80
let buyers_distance_to_me type: map<buyers, float> ;;;;;;;;;0;80
let buyers_distance_norm type: map<buyers, float> ;;;;;;;;;0;80
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;;;;;;;;;3;80
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;;;;;;;;;18;80
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));;;;;;;;;18;80
buyers_distance_to_me.pairs;;;;;;;;;2;80
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;;;;;;;;;0;900
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let clusters type: list<list<buyers>> value: list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(30))) ;;;;;;;;;106;80
list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(30)));;;;;;;;;106;80
simple_clustering_by_distance(buyers_in_my_view,float(30));;;;;;;;;105;80
float(30);;;;;;;;;1;80
let clusters_density type: list<map<list<buyers>, int>> value: list<map<list<buyers>, int>>(clusters collect (each :: length(each))) ;;;;;;;;;3;80
list<map<list<buyers>, int>>(clusters collect (each :: length(each)));;;;;;;;;3;80
clusters collect (each :: length(each));;;;;;;;;3;80
each :: length(each);;;;;;;;;3;475
length(each);;;;;;;;;2;475
let buyers_density type: map<buyers, float> ;;;;;;;;;0;80
loop cluster over: clusters_density ;;;;;;;;;3;80
loop buyers_by_density over: cluster.pairs ;;;;;;;;;3;475
cluster.pairs;;;;;;;;;0;475
loop buyer over: buyers_by_density.key ;;;;;;;;;3;475
buyers_by_density.key;;;;;;;;;1;475
add buyer :: buyers_by_density.value to: buyers_density ;;;;;;;;;1;900
buyer :: buyers_by_density.value;;;;;;;;;0;900
buyers_by_density.value;;;;;;;;;0;900
let distance_weight type: float ;;;;;;;;;0;80
let density_weight type: float ;;;;;;;;;0;80
set density_weight value: self.is_sensing ? 0.8 : 0.2 ;;;;;;;;;0;80
self.is_sensing ? 0.8 : 0.2;;;;;;;;;0;80
self.is_sensing;;;;;;;;;0;80
0.8 : 0.2;;;;;;;;;;
set distance_weight value: 1 - density_weight ;;;;;;;;;0;80
1 - density_weight;;;;;;;;;0;80
let buyers_density_norm type: map<buyers, float> ;;;;;;;;;0;80
set buyers_density_norm value: buyers_density.pairs as_map (each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0)) ;;;;;;;;;3;80
buyers_density.pairs as_map (each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0));;;;;;;;;3;80
buyers_density.pairs;;;;;;;;;0;80
each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0);;;;;;;;;;
each.key;;;;;;;;;0;900
(max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0;;;;;;;;;3;900
max(buyers_density) > 1;;;;;;;;;0;900
max(buyers_density);;;;;;;;;0;900
(self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0;;;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit');;;;;;;;;;
each.value;;;;;;;;;;
set score_s_n value: buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight))) ;;;;;;;;;5;80
buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight)));;;;;;;;;4;80
buyers_distance_norm.pairs;;;;;;;;;1;80
each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight));;;;;;;;;;
each.key;;;;;;;;;1;900
(each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight);;;;;;;;;1;900
each.value * distance_weight;;;;;;;;;1;900
each.value;;;;;;;;;0;900
buyers_density_norm[each.key] * density_weight;;;;;;;;;0;900
buyers_density_norm[each.key];;;;;;;;;0;900
[each.key];;;;;;;;;0;900
each.key;;;;;;;;;0;900
loop buyer over: score_s_n.pairs ;;;;;;;;;18951;80
score_s_n.pairs;;;;;;;;;0;80
do insert (params:PARAMS, into:'TB_SCORE_S_N', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'], values:[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value]);;;;;;;;;18945;900
self.insert(params:PARAMS, into:'TB_SCORE_S_N', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'], values:[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
buyers_density[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_density_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
set score_s_n value: map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0)) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0));;;;;;;;;;
buyers_in_my_view collect (first([each]) :: 1.0);;;;;;;;;;
first([each]) :: 1.0;;;;;;;;;;
first([each]);;;;;;;;;;
[each];;;;;;;;;;
return score_s_n ;;;;;;;;;0;80
mental_state get_ideal (546704 predicate);;;;;;;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;
bool has_ideal (546704 predicate);;;;;;;;;;
bool is_current_plan (4 name);;;;;;;;;;
bool remove_obligation (546704 predicate);;;;;;;;;;
bool change_trust (11 agent, 2 trust);;;;;;;;;;
mental_state get_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool add_subintention (546708 predicate, 546704 subintentions, 3 add_as_desire);;;;;;;;;1;96
emotion get_emotion_with_name (4 name);;;;;;;;;;
bool clear_intentions ;;;;;;;;;;
action get_max_score (map<buyers, float> buyer_score);;;;;;;;;6;80
arg buyer_score type: map<buyers, float> ;;;;;;;;;0;80
return buyer_score.pairs with_max_of each.value ;;;;;;;;;3;80
buyer_score.pairs with_max_of each.value;;;;;;;;;3;80
buyer_score.pairs;;;;;;;;;1;80
each.value;;;;;;;;;1;80
bool has_desire_mental_state (546708 mental_state);;;;;;;;;;
reflex get_current_personality ;;;;;;;;;5;96
set my_current_personality value: self.my_personality ;;;;;;;;;4;96
self.my_personality;;;;;;;;;1;96
if turn_off_personality_probability ;;;;;;;;;1;96
do define_personality (mbti_personality:my_current_personality);;;;;;;;;;
self.define_personality(mbti_personality:my_current_personality);;;;;;;;;;
perceive target: buyers in: viewdist_buyers * 2 ;;;;;;;;;14;1080
viewdist_buyers * 2;;;;;;;;;0;96
if !visited ;;;;;;;;;14;1080
!visited;;;;;;;;;0;1080
focus id: 'location_buyer' var: location ;;;;;;;;;9;1080
ask myself ;;;;;;;;;8;2160
do remove_intention (predicate:wander, desire_also:false);;;;;;;;;4;1080
self.remove_intention(predicate:wander, desire_also:false);;;;;;;;;;
perceive target: sellers ;;;;;;;;;97;1536
if myself.name != self.name ;;;;;;;;;97;1536
myself.name != self.name;;;;;;;;;5;1536
myself.name;;;;;;;;;4;1536
self.name;;;;;;;;;1;1536
focus id: 'location_seller' var: location ;;;;;;;;;8;1440
set sellers_in_my_view value: (self.get_beliefs(predicate:new_predicate('location_seller'))) collect point(get_predicate(mental_state(each)).values['location_value']) ;;;;;;;;;75;1440
(self.get_beliefs(predicate:new_predicate('location_seller'))) collect point(get_predicate(mental_state(each)).values['location_value']);;;;;;;;;74;1440
self.get_beliefs(predicate:new_predicate('location_seller'));;;;;;;;;;
new_predicate('location_seller');;;;;;;;;;
point(get_predicate(mental_state(each)).values['location_value']);;;;;;;;;54;10840
get_predicate(mental_state(each)).values['location_value'];;;;;;;;;50;10840
get_predicate(mental_state(each)).values;;;;;;;;;42;10840
get_predicate(mental_state(each));;;;;;;;;4;10840
mental_state(each);;;;;;;;;2;10840
['location_value'];;;;;;;;;4;10840
do remove_belief (predicate:new_predicate('location_seller'));;;;;;;;;8;1440
self.remove_belief(predicate:new_predicate('location_seller'));;;;;;;;;;
new_predicate('location_seller');;;;;;;;;;
rule belief: new_predicate('location_buyer') new_desire: sell_item strength: 10.0 ;;;;;;;;;;
new_predicate('location_buyer');;;;;;;;;0;96
plan letsWander intention: wander ;;;;;;;;;;
do wander (amplitude:60.0);;;;;;;;;;
plan sellItem intention: sell_item ;;;;;;;;;;
if target = nil ;;;;;;;;;3;96
target = nil;;;;;;;;;0;96
else ;;;;;;;;;;
do goto (target:target);;;;;;;;;;
let must_recalculate_plan type: bool ;;;;;;;;;;
set must_recalculate_plan value: !self.is_judging ? flip(0.8) : flip(0.2) ;;;;;;;;;;
!self.is_judging ? flip(0.8) : flip(0.2);;;;;;;;;;
!self.is_judging;;;;;;;;;;
self.is_judging;;;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);;;;;;;;;;
flip(0.2);;;;;;;;;;
if must_recalculate_plan ;;;;;;;;;;
do get_judging_perceiving_score (buyers_to_calculate:possible_buyers);;;;;;;;;;
self.get_judging_perceiving_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if target = location ;;;;;;;;;;
target = location;;;;;;;;;;
set got_buyer value: true ;;;;;;;;;;
let current_buyer type: buyers value: buyers first_with (target = each.location) ;;;;;;;;;;
buyers first_with (target = each.location);;;;;;;;;;
target = each.location;;;;;;;;;;
each.location;;;;;;;;;;
if current_buyer != nil ;;;;;;;;;;
current_buyer != nil;;;;;;;;;;
ask current_buyer ;;;;;;;;;;
set visited value: true ;;;;;;;;;;
set number_of_visited_buyers value: number_of_visited_buyers + 1 ;;;;;;;;;;
number_of_visited_buyers + 1;;;;;;;;;;
do persist_seller_action (buyer_target:current_buyer, location_target:target);;;;;;;;;;
self.persist_seller_action(buyer_target:current_buyer, location_target:target);;;;;;;;;;
do add_belief (predicate:met_buyer);;;;;;;;;;
self.add_belief(predicate:met_buyer);;;;;;;;;;
add target to: visited_target ;;;;;;;;;;
do remove_belief (predicate:new_predicate('location_buyer', ['location_value'::target]));;;;;;;;;;
self.remove_belief(predicate:new_predicate('location_buyer', ['location_value'::target]));;;;;;;;;;
new_predicate('location_buyer', ['location_value'::target]);;;;;;;;;;
 ['location_value'::target] ;;;;;;;;;;
set target value: nil ;;;;;;;;;;
do remove_intention (predicate:sell_item, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:sell_item, desire_also:true);;;;;;;;;;
do add_subintention (predicate:self.get_current_intention(), subintentions:define_buyer_target, add_as_desire:true);;;;;;;;;3;96
self.add_subintention(predicate:self.get_current_intention(), subintentions:define_buyer_target, add_as_desire:true);;;;;;;;;;
self.get_current_intention();;;;;;;;;;
do current_intention_on_hold ;;;;;;;;;0;96
self.current_intention_on_hold();;;;;;;;;;
plan choose_buyer_target intention: define_buyer_target instantaneous: true ;;;;;;;;;;
set possible_buyers value: (self.get_beliefs(predicate:new_predicate('location_buyer'))) collect point(get_predicate(mental_state(each)).values['location_value']) ;;;;;;;;;1;80
(self.get_beliefs(predicate:new_predicate('location_buyer'))) collect point(get_predicate(mental_state(each)).values['location_value']);;;;;;;;;1;80
self.get_beliefs(predicate:new_predicate('location_buyer'));;;;;;;;;;
new_predicate('location_buyer');;;;;;;;;;
point(get_predicate(mental_state(each)).values['location_value']);;;;;;;;;1;900
get_predicate(mental_state(each)).values['location_value'];;;;;;;;;1;900
get_predicate(mental_state(each)).values;;;;;;;;;1;900
get_predicate(mental_state(each));;;;;;;;;1;900
mental_state(each);;;;;;;;;1;900
['location_value'];;;;;;;;;0;900
set possible_buyers value: self.remove_visited_target(list_of_points:possible_buyers) ;;;;;;;;;1;80
self.remove_visited_target(list_of_points:possible_buyers);;;;;;;;;;
let buyers_score type: map<buyers, float> ;;;;;;;;;1;80
set buyers_score value: self.calculate_score(buyers_to_calculate:possible_buyers) ;;;;;;;;;56775;80
self.calculate_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if empty(buyers_score) ;;;;;;;;;1667;80
empty(buyers_score);;;;;;;;;2;80
else ;;;;;;;;;1663;80
let max_buyer_score type: map<buyers, float> value: self.get_max_score(buyer_score:buyers_score) ;;;;;;;;;11;80
self.get_max_score(buyer_score:buyers_score);;;;;;;;;;
set target value: point(max_buyer_score.keys[0]) ;;;;;;;;;3;80
point(max_buyer_score.keys[0]);;;;;;;;;1;80
max_buyer_score.keys[0];;;;;;;;;1;80
max_buyer_score.keys;;;;;;;;;0;80
[0];;;;;;;;;1;80
do insert (params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;1647;80
self.insert(params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'];;;;;;;;;;
[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
max_buyer_score.values[0];;;;;;;;;;
max_buyer_score.values;;;;;;;;;;
[0];;;;;;;;;;
if !already_visited_cluster ;;;;;;;;;1;80
!already_visited_cluster;;;;;;;;;0;80
set already_visited_cluster value: true ;;;;;;;;;1;16
do remove_intention (predicate:sell_item, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:sell_item, desire_also:true);;;;;;;;;;
do remove_intention (predicate:define_buyer_target, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:define_buyer_target, desire_also:true);;;;;;;;;;
do add_desire (predicate:wander);;;;;;;;;;
self.add_desire(predicate:wander);;;;;;;;;;
do remove_intention (predicate:define_buyer_target, desire_also:true);;;;;;;;;4;80
self.remove_intention(predicate:define_buyer_target, desire_also:true);;;;;;;;;;
aspect default ;;;;;;;76;912;;
draw circle(float(10)) color: color ;;;;;;;76;912;;
circle(float(10));;;;;;;28;912;;
float(10);;;;;;;1;912;;
species buyers skills: [moving] control: simple_bdi ;;;;;;;;;2;6
[moving];;;;;;;;;;
list<buyers> peers ;;;;;;;;;0;100
-199;;;;;;;;;;
MBTI_model host ;;;;;;;;;0;100
-29;;;;;;;;;;
float charisma <- 1.0 ;;;;;;;;;0;100
list<unknown> law_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
bool use_social_architecture <- false ;;;;;;;;;0;100
float agreeableness <- 0.5 ;;;;;;;;;0;100
list<unknown> thinking <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
unknown current_norm ;;;;;;;;;0;100
list<mental_state> belief_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
bool probabilistic_choice <- false ;;;;;;;;;0;100
list<Sanction> sanction_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
float conscientiousness <- 0.5 ;;;;;;;;;0;100
list<mental_state> uncertainty_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
float neurotism <- 0.5 ;;;;;;;;;0;100
list<mental_state> ideal_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
list<emotion> emotion_base <- [] ;;;;;;;;;1;100
[];;;;;;;;;1;1508
float extroversion <- 0.5 ;;;;;;;;;0;100
bool use_norms <- false ;;;;;;;;;1;100
list<BDIPlan> plan_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
float openness <- 0.5 ;;;;;;;;;0;100
list<Norm> norm_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
bool use_personality <- false ;;;;;;;;;0;100
float obedience <- 1.0 ;;;;;;;;;0;100
list<social_link> social_link_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
unknown current_plan ;;;;;;;;;0;100
float plan_persistence <- 1.0 ;;;;;;;;;0;100
list<mental_state> intention_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
bool use_persistence <- false ;;;;;;;;;0;100
list<mental_state> obligation_base <- [] ;;;;;;;;;0;100
[];;;;;;;;;1;1508
float receptivity <- 1.0 ;;;;;;;;;0;100
list<mental_state> desire_base <- [] ;;;;;;;;;1;100
[];;;;;;;;;1;1508
bool use_emotions_architecture <- false ;;;;;;;;;0;100
float intention_persistence <- 1.0 ;;;;;;;;;0;100
path current_path <- nil ;;;;;;;;;0;100
point location ;;;;;;;;;0;100
point destination ;;;;;;;;;0;100
float real_speed <- 0.0 ;;;;;;;;;0;100
float speed <- 3.0 ;;;;;;;;;0;100
geometry current_edge <- nil ;;;;;;;;;0;100
float heading <- rnd(360.0) ;;;;;;;;;0;100
rnd(360.0);;;;;;;;;0;116
rgb color <- #blue ;;;;;;;;;1;100
bool visited <- false ;;;;;;;;;0;100
int qty_buyers <- rnd(1,30) ;;;;;;;;;0;100
rnd(1,30);;;;;;;;;0;100
file<point, int> buyer_icon <- file<point, int>('../../includes/buyer.png') ;;;;;;;;;62;100
file<point, int>('../../includes/buyer.png');;;;;;;;;62;100
predicate wander <- new_predicate('wander') ;;;;;;;;;0;100
new_predicate('wander');;;;;;;;;0;100
mental_state get_belief_with_name (4 name);;;;;;;;;;
bool add_belief (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
social_link get_social_link_with_agent (11 agent);;;;;;;;;;
mental_state get_obligation (546704 predicate);;;;;;;;;;
bool remove_intention (546704 predicate, 3 desire_also);;;;;;;;;4;1160
bool remove_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_beliefs_with_name (4 name);;;;;;;;;;
bool remove_desire_mental_state (546708 mental_state);;;;;;;;;;
bool remove_ideal (546704 predicate);;;;;;;;;;
bool add_desire_mental_state (546708 mental_state, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
bool remove_intention_mental_state (546708 mental_state, 3 desire_also);;;;;;;;;;
mental_state get_belief_mental_state (546708 mental_state);;;;;;;;;;
bool change_liking (11 agent, 2 liking);;;;;;;;;;
list get_beliefs (546704 predicate);;;;;;;;;7;1520
bool add_belief_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool add_directly_uncertainty (546708 uncertainty);;;;;;;;;;
mental_state get_intention (546704 predicate);;;;;;;;;;
bool clear_desires ;;;;;;;;;;
mental_state get_desire_mental_state (546708 mental_state);;;;;;;;;;
bool add_desire (546704 predicate, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;0;16
action wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;
bool has_social_link (546707 social_link);;;;;;;;;;
bool has_belief_with_name (4 name);;;;;;;;;;
list get_intentions_mental_state (546708 mental_state);;;;;;;;;;
bool add_uncertainty_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link (546707 social_link);;;;;;;;;;
bool change_dominance (11 agent, 2 dominance);;;;;;;;;;
bool remove_ideal_mental_state (546708 mental_state);;;;;;;;;;
social_link get_social_link (546707 social_link);;;;;;;;;;
mental_state get_belief_emotion (546706 emotion);;;;;;;;;;
bool add_belief_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_social_links ;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);;;;;;;;;;
bool clear_beliefs ;;;;;;;;;;
bool change_solidarity (11 agent, 2 solidarity);;;;;;;;;;
bool clear_uncertainties ;;;;;;;;;;
bool add_uncertainty_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_ideals ;;;;;;;;;;
bool is_current_intention_mental_state (546708 mental_state);;;;;;;;;;
bool add_intention_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
action get_desires_with_name (4 name);;;;;;;;;;
mental_state get_ideal_mental_state (546708 mental_state);;;;;;;;;;
bool has_uncertainty (546704 predicate);;;;;;;;;;
bool is_current_intention (546704 predicate);;;;;;;;;;
bool current_intention_on_hold (0 until);;;;;;;;;0;96
bool add_directly_ideal (546708 ideal);;;;;;;;;;
mental_state get_desire_with_name (4 name);;;;;;;;;;
bool has_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_intentions (546704 predicate);;;;;;;;;;
action get_plans ;;;;;;;;;;
bool has_obligation (546704 predicate);;;;;;;;;;
bool add_ideal_emotion (546706 emotion, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool remove_emotion (546706 emotion);;;;;;;;;;
bool add_emotion (546706 emotion);;;;;;;;;;
list get_desires_mental_state (546708 mental_state);;;;;;;;;;
bool remove_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
mental_state get_desire (546704 predicate);;;;;;;;;;
bool has_emotion (546706 emotion);;;;;;;;;;
bool remove_uncertainty (546704 predicate);;;;;;;;;;
mental_state get_intention_mental_state (546708 mental_state);;;;;;;;;;
bool has_emotion_with_name (4 name);;;;;;;;;;
bool has_desire (546704 predicate);;;;;;;;;;
bool clear_obligations ;;;;;;;;;;
BDIPlan get_current_plan ;;;;;;;;;;
bool add_ideal_mental_state (546708 mental_state, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool clear_emotions ;;;;;;;;;;
bool add_directly_desire (546708 desire);;;;;;;;;;
bool has_ideal_mental_state (546708 mental_state);;;;;;;;;;
list get_desires (546704 predicate);;;;;;;;;;
bool add_obligation (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link_with_agent (11 agent);;;;;;;;;;
bool add_intention (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
mental_state get_belief (546704 predicate);;;;;;;;;;
list get_beliefs_metal_state (546708 mental_state);;;;;;;;;;
action get_intentions_with_name (4 name);;;;;;;;;;
bool has_desire_with_name (4 name);;;;;;;;;;
mental_state get_uncertainty (546704 predicate);;;;;;;;;;
bool add_directly_belief (546708 belief);;;;;;;;;;
bool replace_belief (546704 old_predicate, 546704 predicate);;;;;;;;;;
BDIPlan get_plan (4 name);;;;;;;;;;
bool has_belief (546704 predicate);;;;;;;;;;
mental_state get_current_intention ;;;;;;;;;0;96
bool add_intention_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
emotion get_emotion (546706 emotion);;;;;;;;;;
bool has_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool remove_desire (546704 predicate);;;;;;;;;;
mental_state get_intention_with_name (4 name);;;;;;;;;;
bool remove_belief (546704 predicate);;;;;;;;;4;1440
bool has_uncertainty_with_name (4 name);;;;;;;;;;
bool add_social_link (546707 social_link);;;;;;;;;;
bool add_ideal (546704 predicate, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool add_uncertainty (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
bool has_social_link_with_agent (11 agent);;;;;;;;;;
bool remove_all_beliefs (546704 predicate);;;;;;;;;;
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;
bool has_ideal_with_name (4 name);;;;;;;;;;
bool change_familiarity (11 agent, 2 familiarity);;;;;;;;;;
bool add_desire_emotion (546706 emotion, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
mental_state get_ideal (546704 predicate);;;;;;;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;
bool has_ideal (546704 predicate);;;;;;;;;;
bool is_current_plan (4 name);;;;;;;;;;
bool remove_obligation (546704 predicate);;;;;;;;;;
bool change_trust (11 agent, 2 trust);;;;;;;;;;
mental_state get_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool add_subintention (546708 predicate, 546704 subintentions, 3 add_as_desire);;;;;;;;;1;96
emotion get_emotion_with_name (4 name);;;;;;;;;;
bool clear_intentions ;;;;;;;;;;
bool has_desire_mental_state (546708 mental_state);;;;;;;;;;
init ;;;;;;;;;0;100
plan letsWander intention: wander ;;;;;;;;;;
do wander (amplitude:60.0, speed:speed);;;;;;;;;;
aspect default ;;;;;;;1285;5700;;
draw rectangle(float(30),float(15)) color: #orange at: point(location.x,location.y - 20) ;;;;;;;235;5700;;
point(location.x,location.y - 20);;;;;;;16;5700;;
location.x;;;;;;;7;5700;;
location.y - 20;;;;;;;6;5700;;
location.y;;;;;;;3;5700;;
rectangle(float(30),float(15));;;;;;;27;5700;;
float(30);;;;;;;6;5700;;
float(15);;;;;;;9;5700;;
draw string(self.name) color: #black size: 4 at: point(location.x - 10,location.y - 18) ;;;;;;;82;5700;;
point(location.x - 10,location.y - 18);;;;;;;11;5700;;
location.x - 10;;;;;;;10;5700;;
location.x;;;;;;;9;5700;;
location.y - 18;;;;;;;1;5700;;
location.y;;;;;;;0;5700;;
string(self.name);;;;;;;9;5700;;
self.name;;;;;;;9;5700;;
draw circle(float(5)) color: visited ? #green : #blue at: point(location.x,location.y + 20) ;;;;;;;425;5700;;
visited ? #green : #blue;;;;;;;10;5700;;
#green : #blue;;;;;;;;;;
point(location.x,location.y + 20);;;;;;;5;5700;;
location.x;;;;;;;1;5700;;
location.y + 20;;;;;;;4;5700;;
location.y;;;;;;;1;5700;;
circle(float(5));;;;;;;238;5700;;
float(5);;;;;;;2;5700;;
draw string(self.qty_buyers) color: #white size: 4 at: point(location.x - 3,location.y + 22) ;;;;;;;79;5700;;
point(location.x - 3,location.y + 22);;;;;;;25;5700;;
location.x - 3;;;;;;;5;5700;;
location.x;;;;;;;4;5700;;
location.y + 22;;;;;;;9;5700;;
location.y;;;;;;;5;5700;;
string(self.qty_buyers);;;;;;;7;5700;;
self.qty_buyers;;;;;;;6;5700;;
draw buyer_icon size: 40 ;;;;;;;441;5700;;
grid grille width: 100 height: 100 neighbors: 4 ;;;;;;;;;14;6
list<grille> peers ;;;;;;;;;0;10000
-199;;;;;;;;;;
MBTI_model host ;;;;;;;;;0;10000
-29;;;;;;;;;;
list<float> bands ;;;;;;;;;3;10000
int grid_x const: true ;;;;;;;;;2;10000
rgb color <- #white ;;;;;;;;;4;10000
float grid_value ;;;;;;;;;1;10000
int grid_y const: true ;;;;;;;;;0;10000
list<grille> neighbors ;;;;;;;;;46;10000
-199;;;;;;;;;;
init ;;;;;;;;;1613;1
create buyers number: nbbuyers ;;;;;;;;;68;1
create sellers number: nbsellers ;;;;;;;;;194;2
do init (mbti_personality:['E','S','F','J']);;;;;;;;;97;1
self.init(mbti_personality:['E','S','F','J']);;;;;;;;;;
['E','S','F','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;181;2
do init (mbti_personality:['E','S','F','P']);;;;;;;;;90;1
self.init(mbti_personality:['E','S','F','P']);;;;;;;;;;
['E','S','F','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;197;2
do init (mbti_personality:['E','S','T','J']);;;;;;;;;98;1
self.init(mbti_personality:['E','S','T','J']);;;;;;;;;;
['E','S','T','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;218;2
do init (mbti_personality:['E','S','T','P']);;;;;;;;;109;1
self.init(mbti_personality:['E','S','T','P']);;;;;;;;;;
['E','S','T','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;176;2
do init (mbti_personality:['E','N','F','J']);;;;;;;;;88;1
self.init(mbti_personality:['E','N','F','J']);;;;;;;;;;
['E','N','F','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;180;2
do init (mbti_personality:['E','N','F','P']);;;;;;;;;90;1
self.init(mbti_personality:['E','N','F','P']);;;;;;;;;;
['E','N','F','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;175;2
do init (mbti_personality:['E','N','T','J']);;;;;;;;;87;1
self.init(mbti_personality:['E','N','T','J']);;;;;;;;;;
['E','N','T','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;179;2
do init (mbti_personality:['E','N','T','P']);;;;;;;;;89;1
self.init(mbti_personality:['E','N','T','P']);;;;;;;;;;
['E','N','T','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;184;2
do init (mbti_personality:['I','S','F','J']);;;;;;;;;92;1
self.init(mbti_personality:['I','S','F','J']);;;;;;;;;;
['I','S','F','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;188;2
do init (mbti_personality:['I','S','F','P']);;;;;;;;;94;1
self.init(mbti_personality:['I','S','F','P']);;;;;;;;;;
['I','S','F','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;185;2
do init (mbti_personality:['I','S','T','J']);;;;;;;;;92;1
self.init(mbti_personality:['I','S','T','J']);;;;;;;;;;
['I','S','T','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;221;2
do init (mbti_personality:['I','S','T','P']);;;;;;;;;110;1
self.init(mbti_personality:['I','S','T','P']);;;;;;;;;;
['I','S','T','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;225;2
do init (mbti_personality:['I','N','F','J']);;;;;;;;;112;1
self.init(mbti_personality:['I','N','F','J']);;;;;;;;;;
['I','N','F','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;230;2
do init (mbti_personality:['I','N','F','P']);;;;;;;;;115;1
self.init(mbti_personality:['I','N','F','P']);;;;;;;;;;
['I','N','F','P'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;177;2
do init (mbti_personality:['I','N','T','J']);;;;;;;;;88;1
self.init(mbti_personality:['I','N','T','J']);;;;;;;;;;
['I','N','T','J'];;;;;;;;;;
create sellers number: nbsellers ;;;;;;;;;172;2
do init (mbti_personality:['I','N','T','P']);;;;;;;;;86;1
self.init(mbti_personality:['I','N','T','P']);;;;;;;;;;
['I','N','T','P'];;;;;;;;;;
reflex stop when: steps = max_steps ;;;;;;;;;65;6
steps = max_steps;;;;;;;;;15;6
do pause ;;;;;;;;;50;1
reflex count ;;;;;;;;;0;6
set steps value: steps + 1 ;;;;;;;;;0;6
steps + 1;;;;;;;;;0;6
experiment 'MBTI' type: 'gui' benchmark: true title: 'Experiment MBTI' ;;;;;;;;;;
list<MBTI> peers ;0;1;;;;;;;;
-199;;;;;;;;;;
MBTI_model host ;0;1;;;;;;;;
-29;;;;;;;;;;
list<MBTI_model> simulations ;0;1;;;;;;;;
-27;;;;;;;;;;
MBTI_model simulation ;0;1;;;;;;;;
-27;;;;;;;;;;
float minimum_cycle_duration <- 0.0 ;0;1;;;;;;;;
float seed <- 2014.0 ;0;1;;;;;;;;
parameter 'Number of Sellers' category: 'Sellers' var: nbsellers <- 1 among: [1,3,5,10,15,20] ;;;;;;;;;;
[1,3,5,10,15,20];;;0;1;;;;;;
parameter 'Number of Buyers' category: 'Buyers' var: nbbuyers <- 100 among: [10,50,100,200,400,500] ;;;;;;;;;;
[10,50,100,200,400,500];;;0;1;;;;;;
parameter 'Disable time track' category: 'General' var: turn_off_time <- true ;;;;;;;;;;
parameter 'Disable personality change' category: 'General' var: turn_off_personality_probability <- false ;;;;;;;;;;
output ;;;;;;;;;;
display 'map' ;;;;;0;6;;;1;2
grid grille lines: #darkgreen flat: true ;;;;;0;8;;;;
species sellers aspect: default ;;;;;0;8;;;;
species buyers aspect: default ;;;;;0;8;;;;
