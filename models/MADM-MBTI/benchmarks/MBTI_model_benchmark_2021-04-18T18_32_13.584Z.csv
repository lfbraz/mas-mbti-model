Execution;Time in ms in Scope #576283 of MBTI_model(0);Invocations in Scope #576283 of MBTI_model(0);Time in ms in Scope #576281 of MBTI(0);Invocations in Scope #576281 of MBTI(0);Time in ms in Scope #576280 (in ExperimentPlan);Invocations in Scope #576280 (in ExperimentPlan);Time in ms in Scope #576286 of MBTI_model(0) (of display map);Invocations in Scope #576286 of MBTI_model(0) (of display map);Time in ms in Scope #576288 of MBTI_model(0) (in java2D display );Invocations in Scope #576288 of MBTI_model(0) (in java2D display )
model MBTI

global ;;;;;;;;;;
list<MBTI_model> peers ;0;1;;;;;;;;
-199;;;;;;;;;;
agent host ;0;1;;;;;;;;
-29;;;;;;;;;;
experiment experiment ;0;1;;;;;;;;
-31;;;;;;;;;;
MBTI_model world ;0;1;;;;;;;;
-27;;;;;;;;;;
int nbsellers ;0;1;;;;;;;;
int nbbuyers ;0;1;;;;;;;;
bool turn_off_time ;0;1;;;;;;;;
bool turn_off_personality_probability ;0;1;;;;;;;;
list<point> visited_target ;0;1;;;;;;;;
int steps <- 0 ;0;1;;;;;;;;
int max_steps <- 5 ;0;1;;;;;;;;
geometry shape <- square(float(500)) ;0;1;;;;;;;;
square(float(500));0;1;;;;;;;;
float(500);0;1;;;;;;;;
map<string, string> PARAMS <-  ['dbtype'::'sqlite','database'::'../../db/mas-mbti-recruitment.db']  ;0;1;;;;;;;;
 ['dbtype'::'sqlite','database'::'../../db/mas-mbti-recruitment.db'] ;0;1;;;;;;;;
list<sellers> sellers ;0;1;;;;;;;;
list<buyers> buyers ;0;1;;;;;;;;
list<grille> grille ;132;1;;;;;;;;
species sellers skills: [moving, SQLSKILL] control: simple_bdi ;19211;2;;;;;;;;
[moving,SQLSKILL];;;;;;;;;;
list<sellers> peers ;1;16;;;;;;;;
-199;;;;;;;;;;
MBTI_model host ;0;16;;;;;;;;
-29;;;;;;;;;;
float charisma <- 1.0 ;0;16;;;;;;;;
list<unknown> law_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
bool use_social_architecture <- false ;0;16;;;;;;;;
float agreeableness <- 0.5 ;0;16;;;;;;;;
list<unknown> thinking <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
unknown current_norm ;0;16;;;;;;;;
list<mental_state> belief_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
bool probabilistic_choice <- false ;0;16;;;;;;;;
list<Sanction> sanction_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
float conscientiousness <- 0.5 ;0;16;;;;;;;;
list<mental_state> uncertainty_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
float neurotism <- 0.5 ;0;16;;;;;;;;
list<mental_state> ideal_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
list<emotion> emotion_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
float extroversion <- 0.5 ;0;16;;;;;;;;
bool use_norms <- false ;0;16;;;;;;;;
list<BDIPlan> plan_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
float openness <- 0.5 ;0;16;;;;;;;;
list<Norm> norm_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
bool use_personality <- false ;0;16;;;;;;;;
float obedience <- 1.0 ;0;16;;;;;;;;
list<social_link> social_link_base <- [] ;1;16;;;;;;;;
[];0;1508;;;;;;;;
unknown current_plan ;0;16;;;;;;;;
float plan_persistence <- 1.0 ;0;16;;;;;;;;
list<mental_state> intention_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
bool use_persistence <- false ;0;16;;;;;;;;
list<mental_state> obligation_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
float receptivity <- 1.0 ;0;16;;;;;;;;
list<mental_state> desire_base <- [] ;0;16;;;;;;;;
[];0;1508;;;;;;;;
bool use_emotions_architecture <- false ;0;16;;;;;;;;
float intention_persistence <- 1.0 ;0;16;;;;;;;;
path current_path <- nil ;0;16;;;;;;;;
point location ;5;16;;;;;;;;
point destination ;0;16;;;;;;;;
float real_speed <- 0.0 ;1;16;;;;;;;;
float speed <- 1.0 ;0;16;;;;;;;;
geometry current_edge <- nil ;0;16;;;;;;;;
float heading <- rnd(360.0) ;0;16;;;;;;;;
rnd(360.0);0;116;;;;;;;;
float viewdist_sellers <- 100.0 ;0;16;;;;;;;;
float viewdist_buyers <- 50.0 ;0;16;;;;;;;;
int count_people_around <- 0 ;0;16;;;;;;;;
bool got_buyer <- false ;0;16;;;;;;;;
string my_personality ;0;16;;;;;;;;
list my_real_personality ;0;16;;;;;;;;
list<string> my_current_personality ;0;16;;;;;;;;
string E_I ;0;16;;;;;;;;
bool is_extroverted ;0;16;;;;;;;;
string S_N ;0;16;;;;;;;;
bool is_sensing ;0;16;;;;;;;;
string T_F ;0;16;;;;;;;;
bool is_thinking ;0;16;;;;;;;;
string J_P ;0;16;;;;;;;;
bool is_judging ;0;16;;;;;;;;
bool already_visited_cluster <- false ;0;16;;;;;;;;
rgb color ;0;16;;;;;;;;
predicate define_item_target <- new_predicate('define_item_target') ;0;16;;;;;;;;
new_predicate('define_item_target');0;16;;;;;;;;
predicate define_buyer_target <- new_predicate('define_buyer_target') ;0;16;;;;;;;;
new_predicate('define_buyer_target');0;16;;;;;;;;
predicate sell_item <- new_predicate('sell_item') ;0;16;;;;;;;;
new_predicate('sell_item');0;16;;;;;;;;
predicate say_something <- new_predicate('say_something') ;0;16;;;;;;;;
new_predicate('say_something');0;16;;;;;;;;
predicate wander <- new_predicate('wander') ;0;16;;;;;;;;
new_predicate('wander');0;16;;;;;;;;
predicate met_buyer <- new_predicate('met_buyer') ;0;16;;;;;;;;
new_predicate('met_buyer');0;16;;;;;;;;
point target ;0;16;;;;;;;;
point new_target ;0;16;;;;;;;;
list<point> perceived_buyers ;0;16;;;;;;;;
list<point> sellers_in_my_view ;0;16;;;;;;;;
list<point> possible_buyers ;0;16;;;;;;;;
float min_distance_to_exclude <- 50.0 ;0;16;;;;;;;;
float weight_e_i <- 1 / 3 ;0;16;;;;;;;;
1 / 3;0;16;;;;;;;;
float weight_s_n <- 1 / 3 ;0;16;;;;;;;;
1 / 3;0;16;;;;;;;;
float weight_t_f <- 1 / 3 ;0;16;;;;;;;;
1 / 3;0;16;;;;;;;;
int cluster_distance <- 30 ;0;16;;;;;;;;
date start_time ;0;16;;;;;;;;
date end_time ;0;16;;;;;;;;
int number_of_visited_buyers <- 0 ;0;16;;;;;;;;
list select (10 params, 4 select, 5 values);;;;;;;;;;
mental_state get_belief_with_name (4 name);;;;;;;;;;
float get_normalized_values (float value, map<buyers, float> buyers_values, string criteria_type);13;1820;;;;;;;;
arg value type: float ;0;1820;;;;;;;;
arg buyers_values type: map<buyers, float> ;0;1820;;;;;;;;
arg criteria_type type: string ;0;1820;;;;;;;;
if criteria_type = 'cost' ;8;1820;;;;;;;;
criteria_type = 'cost';0;1820;;;;;;;;
else ;0;476;;;;;;;;
return abs(value / max(buyers_values)) ;0;476;;;;;;;;
abs(value / max(buyers_values));0;476;;;;;;;;
value / max(buyers_values);0;476;;;;;;;;
max(buyers_values);0;476;;;;;;;;
return (value > 0) ? abs(min(buyers_values) / value) : 1.0 ;3;1344;;;;;;;;
(value > 0) ? abs(min(buyers_values) / value) : 1.0;3;1344;;;;;;;;
value > 0;1;1344;;;;;;;;
abs(min(buyers_values) / value) : 1.0;;;;;;;;;;
abs(min(buyers_values) / value);2;1059;;;;;;;;
min(buyers_values) / value;2;1059;;;;;;;;
min(buyers_values);2;1059;;;;;;;;
bool add_belief (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
social_link get_social_link_with_agent (11 agent);;;;;;;;;;
mental_state get_obligation (546704 predicate);;;;;;;;;;
bool remove_intention (546704 predicate, 3 desire_also);1;376;;;;;;;;
bool remove_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_beliefs_with_name (4 name);;;;;;;;;;
bool remove_desire_mental_state (546708 mental_state);;;;;;;;;;
bool remove_ideal (546704 predicate);;;;;;;;;;
bool add_desire_mental_state (546708 mental_state, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
bool remove_intention_mental_state (546708 mental_state, 3 desire_also);;;;;;;;;;
action init (list<string> mbti_personality);1459;16;;;;;;;;
arg mbti_personality type: list<string> ;0;16;;;;;;;;
set my_personality value: string(mbti_personality) ;0;16;;;;;;;;
string(mbti_personality);0;16;;;;;;;;
set my_current_personality value: mbti_personality ;0;16;;;;;;;;
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_E_I');286;16;;;;;;;;
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_S_N');292;16;;;;;;;;
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SCORE_T_F');291;16;;;;;;;;
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_TARGET');299;16;;;;;;;;
do executeUpdate (params:PARAMS, updateComm:'DELETE FROM TB_SELLER_PRODUCTIVITY');288;16;;;;;;;;
do define_personality (mbti_personality:mbti_personality);2;16;;;;;;;;
self.define_personality(mbti_personality:mbti_personality);;;;;;;;;;
do add_desire (predicate:wander);0;16;;;;;;;;
self.add_desire(predicate:wander);;;;;;;;;;
mental_state get_belief_mental_state (546708 mental_state);;;;;;;;;;
bool change_liking (11 agent, 2 liking);;;;;;;;;;
bool testConnection (10 params);;;;;;;;;;
list get_beliefs (546704 predicate);2;496;;;;;;;;
bool add_belief_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
action define_personality (list<string> mbti_personality);2;16;;;;;;;;
arg mbti_personality type: list<string> ;0;16;;;;;;;;
set E_I value: mbti_personality at 0 ;0;16;;;;;;;;
mbti_personality at 0;0;16;;;;;;;;
set S_N value: mbti_personality at 1 ;0;16;;;;;;;;
mbti_personality at 1;0;16;;;;;;;;
set T_F value: mbti_personality at 2 ;0;16;;;;;;;;
mbti_personality at 2;0;16;;;;;;;;
set J_P value: mbti_personality at 3 ;0;16;;;;;;;;
mbti_personality at 3;0;16;;;;;;;;
set is_extroverted value: (E_I = 'E') ? flip(0.8) : flip(0.2) ;0;16;;;;;;;;
(E_I = 'E') ? flip(0.8) : flip(0.2);0;16;;;;;;;;
E_I = 'E';0;16;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);0;8;;;;;;;;
flip(0.2);0;8;;;;;;;;
set is_sensing value: (S_N = 'S') ? flip(0.8) : flip(0.2) ;1;16;;;;;;;;
(S_N = 'S') ? flip(0.8) : flip(0.2);0;16;;;;;;;;
S_N = 'S';0;16;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);0;8;;;;;;;;
flip(0.2);0;8;;;;;;;;
set is_thinking value: (T_F = 'T') ? flip(0.8) : flip(0.2) ;0;16;;;;;;;;
(T_F = 'T') ? flip(0.8) : flip(0.2);0;16;;;;;;;;
T_F = 'T';0;16;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);0;8;;;;;;;;
flip(0.2);0;8;;;;;;;;
set is_judging value: (J_P = 'J') ? flip(0.8) : flip(0.2) ;1;16;;;;;;;;
(J_P = 'J') ? flip(0.8) : flip(0.2);0;16;;;;;;;;
J_P = 'J';0;16;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);0;8;;;;;;;;
flip(0.2);0;8;;;;;;;;
set my_real_personality value: [] ;0;16;;;;;;;;
[];0;16;;;;;;;;
add is_extroverted ? 'E' : 'I' to: my_real_personality ;0;16;;;;;;;;
is_extroverted ? 'E' : 'I';0;16;;;;;;;;
'E' : 'I';;;;;;;;;;
add is_sensing ? 'S' : 'N' to: my_real_personality ;0;16;;;;;;;;
is_sensing ? 'S' : 'N';0;16;;;;;;;;
'S' : 'N';;;;;;;;;;
add is_thinking ? 'T' : 'F' to: my_real_personality ;0;16;;;;;;;;
is_thinking ? 'T' : 'F';0;16;;;;;;;;
'T' : 'F';;;;;;;;;;
add is_judging ? 'J' : 'P' to: my_real_personality ;0;16;;;;;;;;
is_judging ? 'J' : 'P';0;16;;;;;;;;
'J' : 'P';;;;;;;;;;
set color value: #green ;0;16;;;;;;;;
bool add_directly_uncertainty (546708 uncertainty);;;;;;;;;;
mental_state get_intention (546704 predicate);;;;;;;;;;
bool clear_desires ;;;;;;;;;;
mental_state get_desire_mental_state (546708 mental_state);;;;;;;;;;
bool add_desire (546704 predicate, 2 strength, 1 lifetime, 546704 todo);0;16;;;;;;;;
action wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;
bool has_social_link (546707 social_link);;;;;;;;;;
bool has_belief_with_name (4 name);;;;;;;;;;
list get_intentions_mental_state (546708 mental_state);;;;;;;;;;
bool add_uncertainty_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link (546707 social_link);;;;;;;;;;
bool change_dominance (11 agent, 2 dominance);;;;;;;;;;
bool remove_ideal_mental_state (546708 mental_state);;;;;;;;;;
social_link get_social_link (546707 social_link);;;;;;;;;;
mental_state get_belief_emotion (546706 emotion);;;;;;;;;;
bool add_belief_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_social_links ;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);1;16;;;;;;;;
bool clear_beliefs ;;;;;;;;;;
bool change_solidarity (11 agent, 2 solidarity);;;;;;;;;;
bool clear_uncertainties ;;;;;;;;;;
bool add_uncertainty_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_ideals ;;;;;;;;;;
bool is_current_intention_mental_state (546708 mental_state);;;;;;;;;;
bool add_intention_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
action get_desires_with_name (4 name);;;;;;;;;;
mental_state get_ideal_mental_state (546708 mental_state);;;;;;;;;;
bool has_uncertainty (546704 predicate);;;;;;;;;;
bool is_current_intention (546704 predicate);;;;;;;;;;
bool current_intention_on_hold (0 until);0;16;;;;;;;;
bool add_directly_ideal (546708 ideal);;;;;;;;;;
mental_state get_desire_with_name (4 name);;;;;;;;;;
bool has_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_intentions (546704 predicate);;;;;;;;;;
action get_plans ;;;;;;;;;;
string getCurrentDateTime (4 dateFormat);;;;;;;;;;
int timeStamp ;;;;;;;;;;
bool has_obligation (546704 predicate);;;;;;;;;;
bool add_ideal_emotion (546706 emotion, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool remove_emotion (546706 emotion);;;;;;;;;;
bool add_emotion (546706 emotion);;;;;;;;;;
list get_desires_mental_state (546708 mental_state);;;;;;;;;;
bool remove_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
mental_state get_desire (546704 predicate);;;;;;;;;;
list get_sellers_from_points (list list_of_points);0;27;;;;;;;;
arg list_of_points type: list ;0;27;;;;;;;;
let list_of_sellers type: list<sellers> ;0;27;;;;;;;;
loop seller over: list_of_points ;0;27;;;;;;;;
add sellers(seller) to: list_of_sellers ;0;27;;;;;;;;
sellers(seller);0;27;;;;;;;;
return list_of_sellers ;0;27;;;;;;;;
matrix list2Matrix (5 param, 3 getName, 3 getType);;;;;;;;;;
list get_buyers_from_points (list list_of_points);11;81;;;;;;;;
arg list_of_points type: list ;0;81;;;;;;;;
let list_of_buyers type: list<buyers> ;0;81;;;;;;;;
loop buyer over: list_of_points ;9;81;;;;;;;;
add buyers(buyer) to: list_of_buyers ;9;912;;;;;;;;
buyers(buyer);8;912;;;;;;;;
return list_of_buyers ;0;81;;;;;;;;
bool has_emotion (546706 emotion);;;;;;;;;;
bool remove_uncertainty (546704 predicate);;;;;;;;;;
mental_state get_intention_mental_state (546708 mental_state);;;;;;;;;;
bool has_emotion_with_name (4 name);;;;;;;;;;
bool has_desire (546704 predicate);;;;;;;;;;
string getDateOffset (4 dateFormat, 4 dateStr, 4 offset);;;;;;;;;;
bool clear_obligations ;;;;;;;;;;
BDIPlan get_current_plan ;;;;;;;;;;
bool add_ideal_mental_state (546708 mental_state, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool clear_emotions ;;;;;;;;;;
bool add_directly_desire (546708 desire);;;;;;;;;;
bool has_ideal_mental_state (546708 mental_state);;;;;;;;;;
map<buyers, float> get_distances_norm (list<buyers> buyers_in_my_view);;;;;;;;;;
arg buyers_in_my_view type: list<buyers> ;;;;;;;;;;
return map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each))) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each)));;;;;;;;;;
buyers_in_my_view collect (each :: distance_to(self,each));;;;;;;;;;
each :: distance_to(self,each);;;;;;;;;;
distance_to(self,each);;;;;;;;;;
list get_desires (546704 predicate);;;;;;;;;;
bool add_obligation (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
action persist_seller_action (buyers buyer_target, point location_target);;;;;;;;;;
arg buyer_target type: buyers ;;;;;;;;;;
arg location_target type: point ;;;;;;;;;;
do insert (params:PARAMS, into:'TB_SELLER_PRODUCTIVITY', columns:['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'], values:[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers]);;;;;;;;;;
self.insert(params:PARAMS, into:'TB_SELLER_PRODUCTIVITY', columns:['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'], values:[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers]);;;;;;;;;;
['INTERACTION','SELLER_NAME','SELLER_ORIGINAL_MBTI','SELLER_REAL_MBTI','BUYER_TARGET','LOCATION_TARGET','IS_EXTROVERTED','IS_SENSING','IS_THINKING','IS_JUDGING','NUMBER_OF_VISITED_BUYERS'];;;;;;;;;;
[steps,self.name,self.my_personality,string(self.my_real_personality),buyer_target,location_target,int(is_extroverted),int(is_sensing),int(is_thinking),int(is_judging),self.number_of_visited_buyers];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
string(self.my_real_personality);;;;;;;;;;
self.my_real_personality;;;;;;;;;;
int(is_extroverted);;;;;;;;;;
int(is_sensing);;;;;;;;;;
int(is_thinking);;;;;;;;;;
int(is_judging);;;;;;;;;;
self.number_of_visited_buyers;;;;;;;;;;
bool remove_social_link_with_agent (11 agent);;;;;;;;;;
action get_thinking_feeling_score (list list_of_points);6316;27;;;;;;;;
arg list_of_points type: list ;0;27;;;;;;;;
let score_t_f type: map<buyers, float> ;0;27;;;;;;;;
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;7;27;;;;;;;;
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
let sellers_perceived type: list value: self.get_sellers_from_points(list_of_points:sellers_in_my_view) ;1;27;;;;;;;;
self.get_sellers_from_points(list_of_points:sellers_in_my_view);;;;;;;;;;
let buyers_distance_to_me type: map<buyers, float> ;0;27;;;;;;;;
let buyers_distance_norm type: map<buyers, float> ;0;27;;;;;;;;
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;0;27;;;;;;;;
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;4;27;;;;;;;;
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));4;27;;;;;;;;
buyers_distance_to_me.pairs;0;27;;;;;;;;
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;1;304;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let inc_num_sellers_close_to_buyer type: float value: 0.0 ;0;27;;;;;;;;
let num_sellers_close_to_buyer type: map<buyers, float> ;0;27;;;;;;;;
loop buyer over: buyers_in_my_view ;1;27;;;;;;;;
loop seller over: sellers_perceived ;0;304;;;;;;;;
if distance_to(point(seller),point(buyer)) < min_distance_to_exclude ;0;304;;;;;;;;
distance_to(point(seller),point(buyer)) < min_distance_to_exclude;0;304;;;;;;;;
distance_to(point(seller),point(buyer));0;304;;;;;;;;
point(seller);0;304;;;;;;;;
point(buyer);0;304;;;;;;;;
set inc_num_sellers_close_to_buyer value: inc_num_sellers_close_to_buyer + 1.0 ;0;19;;;;;;;;
inc_num_sellers_close_to_buyer + 1.0;0;19;;;;;;;;
add buyer :: inc_num_sellers_close_to_buyer to: num_sellers_close_to_buyer ;0;304;;;;;;;;
buyer :: inc_num_sellers_close_to_buyer;0;304;;;;;;;;
set inc_num_sellers_close_to_buyer value: 0.0 ;0;304;;;;;;;;
let sellers_close_to_buyer_weight type: float ;0;27;;;;;;;;
let distance_weight type: float ;0;27;;;;;;;;
set sellers_close_to_buyer_weight value: !self.is_thinking ? 0.8 : 0.2 ;0;27;;;;;;;;
!self.is_thinking ? 0.8 : 0.2;0;27;;;;;;;;
!self.is_thinking;0;27;;;;;;;;
self.is_thinking;0;27;;;;;;;;
0.8 : 0.2;;;;;;;;;;
set distance_weight value: 1 - sellers_close_to_buyer_weight ;0;27;;;;;;;;
1 - sellers_close_to_buyer_weight;0;27;;;;;;;;
let num_sellers_close_to_buyer_norm type: map<buyers, float> ;0;27;;;;;;;;
set num_sellers_close_to_buyer_norm value: num_sellers_close_to_buyer.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost'))) ;5;27;;;;;;;;
num_sellers_close_to_buyer.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost')));5;27;;;;;;;;
num_sellers_close_to_buyer.pairs;0;27;;;;;;;;
each.key :: (self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost'));;;;;;;;;;
each.key;0;304;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:num_sellers_close_to_buyer, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
set score_t_f value: buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight))) ;0;27;;;;;;;;
buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight)));0;27;;;;;;;;
buyers_distance_norm.pairs;0;27;;;;;;;;
each.key :: ((each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight));;;;;;;;;;
each.key;0;304;;;;;;;;
(each.value * distance_weight) + (num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight);0;304;;;;;;;;
each.value * distance_weight;0;304;;;;;;;;
each.value;0;304;;;;;;;;
num_sellers_close_to_buyer_norm[each.key] * sellers_close_to_buyer_weight;0;304;;;;;;;;
num_sellers_close_to_buyer_norm[each.key];0;304;;;;;;;;
[each.key];0;304;;;;;;;;
each.key;0;304;;;;;;;;
loop buyer over: score_t_f.pairs ;6298;27;;;;;;;;
score_t_f.pairs;0;27;;;;;;;;
do insert (params:PARAMS, into:'TB_SCORE_T_F', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'], values:[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value]);6296;304;;;;;;;;
self.insert(params:PARAMS, into:'TB_SCORE_T_F', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'], values:[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','NUM_SELLERS_CLOSE_TO_BUYER','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_SELLER_CLOSE_TO_BUYER','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,num_sellers_close_to_buyer[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],num_sellers_close_to_buyer_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
num_sellers_close_to_buyer[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
num_sellers_close_to_buyer_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
return score_t_f ;0;27;;;;;;;;
list remove_visited_target (list list_of_points);0;16;;;;;;;;
arg list_of_points type: list ;0;16;;;;;;;;
remove visited_target to: list_of_points all: true ;0;16;;;;;;;;
return list_of_points ;0;16;;;;;;;;
bool add_intention (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
mental_state get_belief (546704 predicate);;;;;;;;;;
list get_beliefs_metal_state (546708 mental_state);;;;;;;;;;
action get_intentions_with_name (4 name);;;;;;;;;;
bool has_desire_with_name (4 name);;;;;;;;;;
mental_state get_uncertainty (546704 predicate);;;;;;;;;;
list get_biggest_cluster (list buyers_in_my_view);;;;;;;;;;
arg buyers_in_my_view type: list ;;;;;;;;;;
let clusters type: list<list<buyers>> value: list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance))) ;;;;;;;;;;
list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance)));;;;;;;;;;
simple_clustering_by_distance(buyers_in_my_view,float(cluster_distance));;;;;;;;;;
float(cluster_distance);;;;;;;;;;
return clusters with_max_of length(each) ;;;;;;;;;;
clusters with_max_of length(each);;;;;;;;;;
length(each);;;;;;;;;;
map<buyers, float> calculate_score (list<point> buyers_to_calculate);18850;27;;;;;;;;
arg buyers_to_calculate type: list<point> ;0;27;;;;;;;;
set start_time value: turn_off_time ? #nan : machine_time ;0;27;;;;;;;;
turn_off_time ? #nan : machine_time;0;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
let buyers_e_i_score type: map<buyers, float> ;0;27;;;;;;;;
set buyers_e_i_score value: self.get_extroversion_introversion_score(list_of_points:buyers_to_calculate) ;6320;27;;;;;;;;
self.get_extroversion_introversion_score(list_of_points:buyers_to_calculate);;;;;;;;;;
set end_time value: turn_off_time ? #nan : machine_time ;1;27;;;;;;;;
turn_off_time ? #nan : machine_time;1;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
if !turn_off_time ;10;27;;;;;;;;
!turn_off_time;0;27;;;;;;;;
write 'get_extroversion_introversion_score: ' + (end_time - start_time) ;10;27;;;;;;;;
'get_extroversion_introversion_score: ' + (end_time - start_time);0;27;;;;;;;;
end_time - start_time;0;27;;;;;;;;
set start_time value: turn_off_time ? #nan : machine_time ;1;27;;;;;;;;
turn_off_time ? #nan : machine_time;1;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
let buyers_s_n_score type: map<buyers, float> ;2;27;;;;;;;;
set buyers_s_n_score value: self.get_sensing_intuition_score(list_of_points:buyers_to_calculate) ;6151;27;;;;;;;;
self.get_sensing_intuition_score(list_of_points:buyers_to_calculate);;;;;;;;;;
set end_time value: turn_off_time ? #nan : machine_time ;0;27;;;;;;;;
turn_off_time ? #nan : machine_time;0;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
if !turn_off_time ;12;27;;;;;;;;
!turn_off_time;0;27;;;;;;;;
write 'get_sensing_intuition_score: ' + (end_time - start_time) ;12;27;;;;;;;;
'get_sensing_intuition_score: ' + (end_time - start_time);0;27;;;;;;;;
end_time - start_time;0;27;;;;;;;;
set start_time value: turn_off_time ? #nan : machine_time ;1;27;;;;;;;;
turn_off_time ? #nan : machine_time;1;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
let buyers_t_f_score type: map<buyers, float> ;0;27;;;;;;;;
set buyers_t_f_score value: self.get_thinking_feeling_score(list_of_points:possible_buyers) ;6317;27;;;;;;;;
self.get_thinking_feeling_score(list_of_points:possible_buyers);;;;;;;;;;
set end_time value: turn_off_time ? #nan : machine_time ;0;27;;;;;;;;
turn_off_time ? #nan : machine_time;0;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
if !turn_off_time ;11;27;;;;;;;;
!turn_off_time;0;27;;;;;;;;
write 'get_thinking_feeling_score: ' + (end_time - start_time) ;11;27;;;;;;;;
'get_thinking_feeling_score: ' + (end_time - start_time);0;27;;;;;;;;
end_time - start_time;0;27;;;;;;;;
set start_time value: turn_off_time ? #nan : machine_time ;1;27;;;;;;;;
turn_off_time ? #nan : machine_time;0;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
let buyers_score type: map<buyers, float> ;0;27;;;;;;;;
set buyers_score value: map<buyers, float>(buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f)))) ;12;27;;;;;;;;
map<buyers, float>(buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f))));12;27;;;;;;;;
buyers_e_i_score.pairs collect (each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f)));12;27;;;;;;;;
buyers_e_i_score.pairs;0;27;;;;;;;;
each.key :: (((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f));10;304;;;;;;;;
each.key;2;304;;;;;;;;
((each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n)) + (buyers_t_f_score[each.key] * weight_t_f);8;304;;;;;;;;
(each.value * weight_e_i) + (buyers_s_n_score[each.key] * weight_s_n);7;304;;;;;;;;
each.value * weight_e_i;1;304;;;;;;;;
each.value;1;304;;;;;;;;
buyers_s_n_score[each.key] * weight_s_n;5;304;;;;;;;;
buyers_s_n_score[each.key];4;304;;;;;;;;
[each.key];1;304;;;;;;;;
each.key;0;304;;;;;;;;
buyers_t_f_score[each.key] * weight_t_f;0;304;;;;;;;;
buyers_t_f_score[each.key];0;304;;;;;;;;
[each.key];0;304;;;;;;;;
each.key;0;304;;;;;;;;
set end_time value: turn_off_time ? #nan : machine_time ;0;27;;;;;;;;
turn_off_time ? #nan : machine_time;0;27;;;;;;;;
#nan : machine_time;;;;;;;;;;
if !turn_off_time ;9;27;;;;;;;;
!turn_off_time;0;27;;;;;;;;
write 'sum_all_scores: ' + (end_time - start_time) ;9;27;;;;;;;;
'sum_all_scores: ' + (end_time - start_time);1;27;;;;;;;;
end_time - start_time;1;27;;;;;;;;
return buyers_score ;0;27;;;;;;;;
bool add_directly_belief (546708 belief);;;;;;;;;;
bool replace_belief (546704 old_predicate, 546704 predicate);;;;;;;;;;
BDIPlan get_plan (4 name);;;;;;;;;;
bool has_belief (546704 predicate);;;;;;;;;;
int executeUpdate (10 params, 4 updateComm, 5 values);1453;80;;;;;;;;
mental_state get_current_intention ;0;16;;;;;;;;
bool add_intention_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
map<buyers, float> get_buyers_size (list<buyers> buyers_in_my_view);0;27;;;;;;;;
arg buyers_in_my_view type: list<buyers> ;0;27;;;;;;;;
return map<buyers, float>(buyers_in_my_view collect (each :: each.qty_buyers)) ;0;27;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (each :: each.qty_buyers));0;27;;;;;;;;
buyers_in_my_view collect (each :: each.qty_buyers);0;27;;;;;;;;
each :: each.qty_buyers;0;304;;;;;;;;
each.qty_buyers;0;304;;;;;;;;
emotion get_emotion (546706 emotion);;;;;;;;;;
bool has_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool remove_desire (546704 predicate);;;;;;;;;;
mental_state get_intention_with_name (4 name);;;;;;;;;;
int insert (10 params, 4 into, 5 columns, 5 values);18959;928;;;;;;;;
bool remove_belief (546704 predicate);1;480;;;;;;;;
bool has_uncertainty_with_name (4 name);;;;;;;;;;
bool add_social_link (546707 social_link);;;;;;;;;;
bool add_ideal (546704 predicate, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool add_uncertainty (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
action get_judging_perceiving_score (list<point> buyers_to_calculate);7691;11;;;;;;;;
arg buyers_to_calculate type: list<point> ;0;11;;;;;;;;
let new_buyers_score type: map<buyers, float> ;0;11;;;;;;;;
set new_buyers_score value: self.calculate_score(buyers_to_calculate:possible_buyers) ;7690;11;;;;;;;;
self.calculate_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if !empty(new_buyers_score) ;1;11;;;;;;;;
!empty(new_buyers_score);0;11;;;;;;;;
empty(new_buyers_score);0;11;;;;;;;;
let max_buyer_score type: map<buyers, float> value: self.get_max_score(buyer_score:new_buyers_score) ;0;11;;;;;;;;
self.get_max_score(buyer_score:new_buyers_score);;;;;;;;;;
set new_target value: point(max_buyer_score.keys[0]) ;1;11;;;;;;;;
point(max_buyer_score.keys[0]);1;11;;;;;;;;
max_buyer_score.keys[0];0;11;;;;;;;;
max_buyer_score.keys;0;11;;;;;;;;
[0];0;11;;;;;;;;
if target != point(max_buyer_score.keys[0]) ;0;11;;;;;;;;
target != point(max_buyer_score.keys[0]);0;11;;;;;;;;
point(max_buyer_score.keys[0]);0;11;;;;;;;;
max_buyer_score.keys[0];0;11;;;;;;;;
max_buyer_score.keys;0;11;;;;;;;;
[0];0;11;;;;;;;;
set target value: new_target ;;;;;;;;;;
do goto (target:target);;;;;;;;;;
do insert (params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
self.insert(params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'];;;;;;;;;;
[steps,'NEW TARGET (J-P)',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
max_buyer_score.values[0];;;;;;;;;;
max_buyer_score.values;;;;;;;;;;
[0];;;;;;;;;;
bool has_social_link_with_agent (11 agent);;;;;;;;;;
bool remove_all_beliefs (546704 predicate);;;;;;;;;;
map<buyers, float> get_distances (list<buyers> buyers_in_my_view);2;81;;;;;;;;
arg buyers_in_my_view type: list<buyers> ;0;81;;;;;;;;
return map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each))) ;2;81;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (each :: distance_to(self,each)));2;81;;;;;;;;
buyers_in_my_view collect (each :: distance_to(self,each));2;81;;;;;;;;
each :: distance_to(self,each);1;912;;;;;;;;
distance_to(self,each);1;912;;;;;;;;
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;
bool has_ideal_with_name (4 name);;;;;;;;;;
bool change_familiarity (11 agent, 2 familiarity);;;;;;;;;;
action get_extroversion_introversion_score (list list_of_points);6320;27;;;;;;;;
arg list_of_points type: list ;0;27;;;;;;;;
let score_e_i type: map<buyers, float> ;0;27;;;;;;;;
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;1;27;;;;;;;;
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
if length(buyers_in_my_view) = 1 ;6319;27;;;;;;;;
length(buyers_in_my_view) = 1;1;27;;;;;;;;
length(buyers_in_my_view);0;27;;;;;;;;
else ;6318;27;;;;;;;;
set buyers_in_my_view value: reverse(buyers_in_my_view sort_by distance_to(each,self)) ;2;27;;;;;;;;
reverse(buyers_in_my_view sort_by distance_to(each,self));2;27;;;;;;;;
buyers_in_my_view sort_by distance_to(each,self);2;27;;;;;;;;
distance_to(each,self);1;1568;;;;;;;;
let buyers_distance_to_me type: map<buyers, float> ;0;27;;;;;;;;
let buyers_distance_norm type: map<buyers, float> ;0;27;;;;;;;;
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;0;27;;;;;;;;
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;5;27;;;;;;;;
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));5;27;;;;;;;;
buyers_distance_to_me.pairs;1;27;;;;;;;;
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;1;304;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let buyers_size type: map<buyers, float> ;0;27;;;;;;;;
let buyers_size_norm type: map<buyers, float> ;0;27;;;;;;;;
set buyers_size value: self.get_buyers_size(buyers_in_my_view:buyers_in_my_view) ;0;27;;;;;;;;
self.get_buyers_size(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
let criteria_type type: string ;0;27;;;;;;;;
set criteria_type value: !self.is_extroverted ? 'cost' : 'benefit' ;0;27;;;;;;;;
!self.is_extroverted ? 'cost' : 'benefit';0;27;;;;;;;;
!self.is_extroverted;0;27;;;;;;;;
self.is_extroverted;0;27;;;;;;;;
'cost' : 'benefit';;;;;;;;;;
set buyers_size_norm value: buyers_size.pairs as_map (each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type))) ;3;27;;;;;;;;
buyers_size.pairs as_map (each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type)));3;27;;;;;;;;
buyers_size.pairs;0;27;;;;;;;;
each.key :: float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type));;;;;;;;;;
each.key;0;304;;;;;;;;
float(self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type));3;304;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_size, criteria_type:criteria_type);;;;;;;;;;
each.value;;;;;;;;;;
set score_e_i value: buyers_distance_norm.pairs as_map (each.key :: (each.value + buyers_size_norm[each.key])) ;2;27;;;;;;;;
buyers_distance_norm.pairs as_map (each.key :: (each.value + buyers_size_norm[each.key]));2;27;;;;;;;;
buyers_distance_norm.pairs;0;27;;;;;;;;
each.key :: (each.value + buyers_size_norm[each.key]);;;;;;;;;;
each.key;1;304;;;;;;;;
each.value + buyers_size_norm[each.key];1;304;;;;;;;;
each.value;0;304;;;;;;;;
buyers_size_norm[each.key];1;304;;;;;;;;
[each.key];0;304;;;;;;;;
each.key;0;304;;;;;;;;
loop buyer over: score_e_i.pairs ;6306;27;;;;;;;;
score_e_i.pairs;0;27;;;;;;;;
do insert (params:PARAMS, into:'TB_SCORE_E_I', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'], values:[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value]);6305;304;;;;;;;;
self.insert(params:PARAMS, into:'TB_SCORE_E_I', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'], values:[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','DISTANCE_TO_BUYER','NUMBER_OF_PEOPLE_AT_BUYER','BUYER_NAME','IS_EXTROVERTED','SCORE_DISTANCE','SCORE_QTY_BUYERS','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,buyers_distance_to_me[buyer.key],buyers(buyer.key).qty_buyers,buyers(buyer.key).name,int(self.is_extroverted),buyers_distance_norm[buyer.key],buyers_size_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).qty_buyers;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
int(self.is_extroverted);;;;;;;;;;
self.is_extroverted;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_size_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
return score_e_i ;0;27;;;;;;;;
set score_e_i value: map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0)) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0));;;;;;;;;;
buyers_in_my_view collect (first([each]) :: 1.0);;;;;;;;;;
first([each]) :: 1.0;;;;;;;;;;
first([each]);;;;;;;;;;
[each];;;;;;;;;;
bool add_desire_emotion (546706 emotion, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
action get_sensing_intuition_score (list list_of_points);6151;27;;;;;;;;
arg list_of_points type: list ;0;27;;;;;;;;
let score_s_n type: map<buyers, float> ;0;27;;;;;;;;
let buyers_in_my_view type: list<buyers> value: self.get_buyers_from_points(list_of_points:list_of_points) ;6;27;;;;;;;;
self.get_buyers_from_points(list_of_points:list_of_points);;;;;;;;;;
if length(buyers_in_my_view) = 1 ;6145;27;;;;;;;;
length(buyers_in_my_view) = 1;0;27;;;;;;;;
length(buyers_in_my_view);0;27;;;;;;;;
else ;6145;27;;;;;;;;
let buyers_distance_to_me type: map<buyers, float> ;0;27;;;;;;;;
let buyers_distance_norm type: map<buyers, float> ;0;27;;;;;;;;
set buyers_distance_to_me value: self.get_distances(buyers_in_my_view:buyers_in_my_view) ;2;27;;;;;;;;
self.get_distances(buyers_in_my_view:buyers_in_my_view);;;;;;;;;;
set buyers_distance_norm value: buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'))) ;3;27;;;;;;;;
buyers_distance_to_me.pairs as_map (each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost')));3;27;;;;;;;;
buyers_distance_to_me.pairs;0;27;;;;;;;;
each.key :: (self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost'));;;;;;;;;;
each.key;0;304;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_distance_to_me, criteria_type:'cost');;;;;;;;;;
each.value;;;;;;;;;;
let clusters type: list<list<buyers>> value: list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(30))) ;37;27;;;;;;;;
list<list<buyers>>(simple_clustering_by_distance(buyers_in_my_view,float(30)));37;27;;;;;;;;
simple_clustering_by_distance(buyers_in_my_view,float(30));37;27;;;;;;;;
float(30);0;27;;;;;;;;
let clusters_density type: list<map<list<buyers>, int>> value: list<map<list<buyers>, int>>(clusters collect (each :: length(each))) ;2;27;;;;;;;;
list<map<list<buyers>, int>>(clusters collect (each :: length(each)));2;27;;;;;;;;
clusters collect (each :: length(each));2;27;;;;;;;;
each :: length(each);1;159;;;;;;;;
length(each);0;159;;;;;;;;
let buyers_density type: map<buyers, float> ;0;27;;;;;;;;
loop cluster over: clusters_density ;0;27;;;;;;;;
loop buyers_by_density over: cluster.pairs ;0;159;;;;;;;;
cluster.pairs;0;159;;;;;;;;
loop buyer over: buyers_by_density.key ;0;159;;;;;;;;
buyers_by_density.key;0;159;;;;;;;;
add buyer :: buyers_by_density.value to: buyers_density ;0;304;;;;;;;;
buyer :: buyers_by_density.value;0;304;;;;;;;;
buyers_by_density.value;0;304;;;;;;;;
let distance_weight type: float ;0;27;;;;;;;;
let density_weight type: float ;0;27;;;;;;;;
set density_weight value: self.is_sensing ? 0.8 : 0.2 ;1;27;;;;;;;;
self.is_sensing ? 0.8 : 0.2;0;27;;;;;;;;
self.is_sensing;0;27;;;;;;;;
0.8 : 0.2;;;;;;;;;;
set distance_weight value: 1 - density_weight ;0;27;;;;;;;;
1 - density_weight;0;27;;;;;;;;
let buyers_density_norm type: map<buyers, float> ;0;27;;;;;;;;
set buyers_density_norm value: buyers_density.pairs as_map (each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0)) ;5;27;;;;;;;;
buyers_density.pairs as_map (each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0));5;27;;;;;;;;
buyers_density.pairs;1;27;;;;;;;;
each.key :: ((max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0);;;;;;;;;;
each.key;0;304;;;;;;;;
(max(buyers_density) > 1) ? (self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0;3;304;;;;;;;;
max(buyers_density) > 1;0;304;;;;;;;;
max(buyers_density);0;304;;;;;;;;
(self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit')) : 1.0;;;;;;;;;;
self.get_normalized_values(value:each.value, buyers_values:buyers_density, criteria_type:'benefit');;;;;;;;;;
each.value;;;;;;;;;;
set score_s_n value: buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight))) ;0;27;;;;;;;;
buyers_distance_norm.pairs as_map (each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight)));0;27;;;;;;;;
buyers_distance_norm.pairs;0;27;;;;;;;;
each.key :: ((each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight));;;;;;;;;;
each.key;0;304;;;;;;;;
(each.value * distance_weight) + (buyers_density_norm[each.key] * density_weight);0;304;;;;;;;;
each.value * distance_weight;0;304;;;;;;;;
each.value;0;304;;;;;;;;
buyers_density_norm[each.key] * density_weight;0;304;;;;;;;;
buyers_density_norm[each.key];0;304;;;;;;;;
[each.key];0;304;;;;;;;;
each.key;0;304;;;;;;;;
loop buyer over: score_s_n.pairs ;6095;27;;;;;;;;
score_s_n.pairs;0;27;;;;;;;;
do insert (params:PARAMS, into:'TB_SCORE_S_N', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'], values:[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value]);6094;304;;;;;;;;
self.insert(params:PARAMS, into:'TB_SCORE_S_N', columns:['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'], values:[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value]);;;;;;;;;;
['INTERACTION','SELLER_NAME','MBTI_SELLER','CLUSTER_DENSITY','DISTANCE_TO_BUYER','BUYER_NAME','SCORE_DISTANCE','SCORE_DENSITY','SCORE'];;;;;;;;;;
[steps,self.name,self.my_personality,buyers_density[buyer.key],buyers_distance_to_me[buyer.key],buyers(buyer.key).name,buyers_distance_norm[buyer.key],buyers_density_norm[buyer.key],buyer.value];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
buyers_density[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_to_me[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers(buyer.key).name;;;;;;;;;;
buyers(buyer.key);;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_distance_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyers_density_norm[buyer.key];;;;;;;;;;
[buyer.key];;;;;;;;;;
buyer.key;;;;;;;;;;
buyer.value;;;;;;;;;;
set score_s_n value: map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0)) ;;;;;;;;;;
map<buyers, float>(buyers_in_my_view collect (first([each]) :: 1.0));;;;;;;;;;
buyers_in_my_view collect (first([each]) :: 1.0);;;;;;;;;;
first([each]) :: 1.0;;;;;;;;;;
first([each]);;;;;;;;;;
[each];;;;;;;;;;
return score_s_n ;0;27;;;;;;;;
mental_state get_ideal (546704 predicate);;;;;;;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;
bool has_ideal (546704 predicate);;;;;;;;;;
bool is_current_plan (4 name);;;;;;;;;;
bool remove_obligation (546704 predicate);;;;;;;;;;
bool change_trust (11 agent, 2 trust);;;;;;;;;;
mental_state get_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool add_subintention (546708 predicate, 546704 subintentions, 3 add_as_desire);0;16;;;;;;;;
emotion get_emotion_with_name (4 name);;;;;;;;;;
bool clear_intentions ;;;;;;;;;;
action get_max_score (map<buyers, float> buyer_score);0;27;;;;;;;;
arg buyer_score type: map<buyers, float> ;0;27;;;;;;;;
return buyer_score.pairs with_max_of each.value ;0;27;;;;;;;;
buyer_score.pairs with_max_of each.value;0;27;;;;;;;;
buyer_score.pairs;0;27;;;;;;;;
each.value;0;304;;;;;;;;
bool has_desire_mental_state (546708 mental_state);;;;;;;;;;
reflex get_current_personality ;0;32;;;;;;;;
set my_current_personality value: self.my_personality ;0;32;;;;;;;;
self.my_personality;0;32;;;;;;;;
if turn_off_personality_probability ;0;32;;;;;;;;
do define_personality (mbti_personality:my_current_personality);;;;;;;;;;
self.define_personality(mbti_personality:my_current_personality);;;;;;;;;;
perceive target: buyers in: viewdist_buyers * 2 ;8;360;;;;;;;;
viewdist_buyers * 2;0;32;;;;;;;;
if !visited ;8;360;;;;;;;;
!visited;1;360;;;;;;;;
focus id: 'location_buyer' var: location ;2;360;;;;;;;;
ask myself ;9;720;;;;;;;;
do remove_intention (predicate:wander, desire_also:false);4;360;;;;;;;;
self.remove_intention(predicate:wander, desire_also:false);;;;;;;;;;
perceive target: sellers ;22;512;;;;;;;;
if myself.name != self.name ;18;512;;;;;;;;
myself.name != self.name;2;512;;;;;;;;
myself.name;0;512;;;;;;;;
self.name;2;512;;;;;;;;
focus id: 'location_seller' var: location ;3;480;;;;;;;;
set sellers_in_my_view value: (self.get_beliefs(predicate:new_predicate('location_seller'))) collect point(get_predicate(mental_state(each)).values['location_value']) ;11;480;;;;;;;;
(self.get_beliefs(predicate:new_predicate('location_seller'))) collect point(get_predicate(mental_state(each)).values['location_value']);11;480;;;;;;;;
self.get_beliefs(predicate:new_predicate('location_seller'));;;;;;;;;;
new_predicate('location_seller');;;;;;;;;;
point(get_predicate(mental_state(each)).values['location_value']);7;3160;;;;;;;;
get_predicate(mental_state(each)).values['location_value'];6;3160;;;;;;;;
get_predicate(mental_state(each)).values;4;3160;;;;;;;;
get_predicate(mental_state(each));2;3160;;;;;;;;
mental_state(each);1;3160;;;;;;;;
['location_value'];1;3160;;;;;;;;
do remove_belief (predicate:new_predicate('location_seller'));1;480;;;;;;;;
self.remove_belief(predicate:new_predicate('location_seller'));;;;;;;;;;
new_predicate('location_seller');;;;;;;;;;
rule belief: new_predicate('location_buyer') new_desire: sell_item strength: 10.0 ;;;;;;;;;;
new_predicate('location_buyer');0;32;;;;;;;;
plan letsWander intention: wander ;;;;;;;;;;
do wander (amplitude:60.0);;;;;;;;;;
plan sellItem intention: sell_item ;;;;;;;;;;
if target = nil ;7693;32;;;;;;;;
target = nil;0;32;;;;;;;;
else ;7693;16;;;;;;;;
do goto (target:target);1;16;;;;;;;;
let must_recalculate_plan type: bool ;0;16;;;;;;;;
set must_recalculate_plan value: !self.is_judging ? flip(0.8) : flip(0.2) ;1;16;;;;;;;;
!self.is_judging ? flip(0.8) : flip(0.2);1;16;;;;;;;;
!self.is_judging;0;16;;;;;;;;
self.is_judging;0;16;;;;;;;;
flip(0.8) : flip(0.2);;;;;;;;;;
flip(0.8);1;9;;;;;;;;
flip(0.2);0;7;;;;;;;;
if must_recalculate_plan ;7691;16;;;;;;;;
do get_judging_perceiving_score (buyers_to_calculate:possible_buyers);7691;11;;;;;;;;
self.get_judging_perceiving_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if target = location ;0;16;;;;;;;;
target = location;0;16;;;;;;;;
set got_buyer value: true ;;;;;;;;;;
let current_buyer type: buyers value: buyers first_with (target = each.location) ;;;;;;;;;;
buyers first_with (target = each.location);;;;;;;;;;
target = each.location;;;;;;;;;;
each.location;;;;;;;;;;
if current_buyer != nil ;;;;;;;;;;
current_buyer != nil;;;;;;;;;;
ask current_buyer ;;;;;;;;;;
set visited value: true ;;;;;;;;;;
set number_of_visited_buyers value: number_of_visited_buyers + 1 ;;;;;;;;;;
number_of_visited_buyers + 1;;;;;;;;;;
do persist_seller_action (buyer_target:current_buyer, location_target:target);;;;;;;;;;
self.persist_seller_action(buyer_target:current_buyer, location_target:target);;;;;;;;;;
do add_belief (predicate:met_buyer);;;;;;;;;;
self.add_belief(predicate:met_buyer);;;;;;;;;;
add target to: visited_target ;;;;;;;;;;
do remove_belief (predicate:new_predicate('location_buyer', ['location_value'::target]));;;;;;;;;;
self.remove_belief(predicate:new_predicate('location_buyer', ['location_value'::target]));;;;;;;;;;
new_predicate('location_buyer', ['location_value'::target]);;;;;;;;;;
 ['location_value'::target] ;;;;;;;;;;
set target value: nil ;;;;;;;;;;
do remove_intention (predicate:sell_item, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:sell_item, desire_also:true);;;;;;;;;;
do add_subintention (predicate:self.get_current_intention(), subintentions:define_buyer_target, add_as_desire:true);0;16;;;;;;;;
self.add_subintention(predicate:self.get_current_intention(), subintentions:define_buyer_target, add_as_desire:true);;;;;;;;;;
self.get_current_intention();;;;;;;;;;
do current_intention_on_hold ;0;16;;;;;;;;
self.current_intention_on_hold();;;;;;;;;;
plan choose_buyer_target intention: define_buyer_target instantaneous: true ;;;;;;;;;;
set possible_buyers value: (self.get_beliefs(predicate:new_predicate('location_buyer'))) collect point(get_predicate(mental_state(each)).values['location_value']) ;0;16;;;;;;;;
(self.get_beliefs(predicate:new_predicate('location_buyer'))) collect point(get_predicate(mental_state(each)).values['location_value']);0;16;;;;;;;;
self.get_beliefs(predicate:new_predicate('location_buyer'));;;;;;;;;;
new_predicate('location_buyer');;;;;;;;;;
point(get_predicate(mental_state(each)).values['location_value']);0;180;;;;;;;;
get_predicate(mental_state(each)).values['location_value'];0;180;;;;;;;;
get_predicate(mental_state(each)).values;0;180;;;;;;;;
get_predicate(mental_state(each));0;180;;;;;;;;
mental_state(each);0;180;;;;;;;;
['location_value'];0;180;;;;;;;;
set possible_buyers value: self.remove_visited_target(list_of_points:possible_buyers) ;0;16;;;;;;;;
self.remove_visited_target(list_of_points:possible_buyers);;;;;;;;;;
let buyers_score type: map<buyers, float> ;0;16;;;;;;;;
set buyers_score value: self.calculate_score(buyers_to_calculate:possible_buyers) ;11160;16;;;;;;;;
self.calculate_score(buyers_to_calculate:possible_buyers);;;;;;;;;;
if empty(buyers_score) ;324;16;;;;;;;;
empty(buyers_score);0;16;;;;;;;;
else ;324;16;;;;;;;;
let max_buyer_score type: map<buyers, float> value: self.get_max_score(buyer_score:buyers_score) ;0;16;;;;;;;;
self.get_max_score(buyer_score:buyers_score);;;;;;;;;;
set target value: point(max_buyer_score.keys[0]) ;0;16;;;;;;;;
point(max_buyer_score.keys[0]);0;16;;;;;;;;
max_buyer_score.keys[0];0;16;;;;;;;;
max_buyer_score.keys;0;16;;;;;;;;
[0];0;16;;;;;;;;
do insert (params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);323;16;;;;;;;;
self.insert(params:PARAMS, into:'TB_TARGET', columns:['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'], values:[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]]);;;;;;;;;;
['INTERACTION','TYPE','SELLER_NAME','MBTI_SELLER','BUYER_TARGET','SCORE'];;;;;;;;;;
[steps,'ORIGINAL',self.name,self.my_personality,max_buyer_score.keys[0],max_buyer_score.values[0]];;;;;;;;;;
self.name;;;;;;;;;;
self.my_personality;;;;;;;;;;
max_buyer_score.keys[0];;;;;;;;;;
max_buyer_score.keys;;;;;;;;;;
[0];;;;;;;;;;
max_buyer_score.values[0];;;;;;;;;;
max_buyer_score.values;;;;;;;;;;
[0];;;;;;;;;;
if !already_visited_cluster ;1;16;;;;;;;;
!already_visited_cluster;1;16;;;;;;;;
set already_visited_cluster value: true ;0;16;;;;;;;;
do remove_intention (predicate:sell_item, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:sell_item, desire_also:true);;;;;;;;;;
do remove_intention (predicate:define_buyer_target, desire_also:true);;;;;;;;;;
self.remove_intention(predicate:define_buyer_target, desire_also:true);;;;;;;;;;
do add_desire (predicate:wander);;;;;;;;;;
self.add_desire(predicate:wander);;;;;;;;;;
do remove_intention (predicate:define_buyer_target, desire_also:true);0;16;;;;;;;;
self.remove_intention(predicate:define_buyer_target, desire_also:true);;;;;;;;;;
aspect default ;;;;;;;;;27;368
draw circle(float(10)) color: color ;;;;;;;;;27;368
circle(float(10));;;;;;;;;8;368
float(10);;;;;;;;;0;368
species buyers skills: [moving] control: simple_bdi ;2;2;;;;;;;;
[moving];;;;;;;;;;
list<buyers> peers ;0;100;;;;;;;;
-199;;;;;;;;;;
MBTI_model host ;0;100;;;;;;;;
-29;;;;;;;;;;
float charisma <- 1.0 ;0;100;;;;;;;;
list<unknown> law_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
bool use_social_architecture <- false ;8;100;;;;;;;;
float agreeableness <- 0.5 ;0;100;;;;;;;;
list<unknown> thinking <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
unknown current_norm ;0;100;;;;;;;;
list<mental_state> belief_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
bool probabilistic_choice <- false ;0;100;;;;;;;;
list<Sanction> sanction_base <- [] ;8;100;;;;;;;;
[];0;1508;;;;;;;;
float conscientiousness <- 0.5 ;0;100;;;;;;;;
list<mental_state> uncertainty_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
float neurotism <- 0.5 ;0;100;;;;;;;;
list<mental_state> ideal_base <- [] ;1;100;;;;;;;;
[];0;1508;;;;;;;;
list<emotion> emotion_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
float extroversion <- 0.5 ;0;100;;;;;;;;
bool use_norms <- false ;0;100;;;;;;;;
list<BDIPlan> plan_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
float openness <- 0.5 ;0;100;;;;;;;;
list<Norm> norm_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
bool use_personality <- false ;0;100;;;;;;;;
float obedience <- 1.0 ;0;100;;;;;;;;
list<social_link> social_link_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
unknown current_plan ;0;100;;;;;;;;
float plan_persistence <- 1.0 ;0;100;;;;;;;;
list<mental_state> intention_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
bool use_persistence <- false ;0;100;;;;;;;;
list<mental_state> obligation_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
float receptivity <- 1.0 ;0;100;;;;;;;;
list<mental_state> desire_base <- [] ;0;100;;;;;;;;
[];0;1508;;;;;;;;
bool use_emotions_architecture <- false ;0;100;;;;;;;;
float intention_persistence <- 1.0 ;0;100;;;;;;;;
path current_path <- nil ;1;100;;;;;;;;
point location ;3;100;;;;;;;;
point destination ;0;100;;;;;;;;
float real_speed <- 0.0 ;0;100;;;;;;;;
float speed <- 3.0 ;0;100;;;;;;;;
geometry current_edge <- nil ;0;100;;;;;;;;
float heading <- rnd(360.0) ;0;100;;;;;;;;
rnd(360.0);0;116;;;;;;;;
rgb color <- #blue ;0;100;;;;;;;;
bool visited <- false ;0;100;;;;;;;;
int qty_buyers <- rnd(1,30) ;0;100;;;;;;;;
rnd(1,30);0;100;;;;;;;;
file<point, int> buyer_icon <- file<point, int>('../../includes/buyer.png') ;65;100;;;;;;;;
file<point, int>('../../includes/buyer.png');65;100;;;;;;;;
predicate wander <- new_predicate('wander') ;0;100;;;;;;;;
new_predicate('wander');0;100;;;;;;;;
mental_state get_belief_with_name (4 name);;;;;;;;;;
bool add_belief (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
social_link get_social_link_with_agent (11 agent);;;;;;;;;;
mental_state get_obligation (546704 predicate);;;;;;;;;;
bool remove_intention (546704 predicate, 3 desire_also);1;376;;;;;;;;
bool remove_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_beliefs_with_name (4 name);;;;;;;;;;
bool remove_desire_mental_state (546708 mental_state);;;;;;;;;;
bool remove_ideal (546704 predicate);;;;;;;;;;
bool add_desire_mental_state (546708 mental_state, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
bool remove_intention_mental_state (546708 mental_state, 3 desire_also);;;;;;;;;;
mental_state get_belief_mental_state (546708 mental_state);;;;;;;;;;
bool change_liking (11 agent, 2 liking);;;;;;;;;;
list get_beliefs (546704 predicate);2;496;;;;;;;;
bool add_belief_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool add_directly_uncertainty (546708 uncertainty);;;;;;;;;;
mental_state get_intention (546704 predicate);;;;;;;;;;
bool clear_desires ;;;;;;;;;;
mental_state get_desire_mental_state (546708 mental_state);;;;;;;;;;
bool add_desire (546704 predicate, 2 strength, 1 lifetime, 546704 todo);0;16;;;;;;;;
action wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;
bool has_social_link (546707 social_link);;;;;;;;;;
bool has_belief_with_name (4 name);;;;;;;;;;
list get_intentions_mental_state (546708 mental_state);;;;;;;;;;
bool add_uncertainty_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link (546707 social_link);;;;;;;;;;
bool change_dominance (11 agent, 2 dominance);;;;;;;;;;
bool remove_ideal_mental_state (546708 mental_state);;;;;;;;;;
social_link get_social_link (546707 social_link);;;;;;;;;;
mental_state get_belief_emotion (546706 emotion);;;;;;;;;;
bool add_belief_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_social_links ;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);1;16;;;;;;;;
bool clear_beliefs ;;;;;;;;;;
bool change_solidarity (11 agent, 2 solidarity);;;;;;;;;;
bool clear_uncertainties ;;;;;;;;;;
bool add_uncertainty_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
bool clear_ideals ;;;;;;;;;;
bool is_current_intention_mental_state (546708 mental_state);;;;;;;;;;
bool add_intention_emotion (546706 emotion, 2 strength, 1 lifetime);;;;;;;;;;
action get_desires_with_name (4 name);;;;;;;;;;
mental_state get_ideal_mental_state (546708 mental_state);;;;;;;;;;
bool has_uncertainty (546704 predicate);;;;;;;;;;
bool is_current_intention (546704 predicate);;;;;;;;;;
bool current_intention_on_hold (0 until);0;16;;;;;;;;
bool add_directly_ideal (546708 ideal);;;;;;;;;;
mental_state get_desire_with_name (4 name);;;;;;;;;;
bool has_belief_mental_state (546708 mental_state);;;;;;;;;;
list get_intentions (546704 predicate);;;;;;;;;;
action get_plans ;;;;;;;;;;
bool has_obligation (546704 predicate);;;;;;;;;;
bool add_ideal_emotion (546706 emotion, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool remove_emotion (546706 emotion);;;;;;;;;;
bool add_emotion (546706 emotion);;;;;;;;;;
list get_desires_mental_state (546708 mental_state);;;;;;;;;;
bool remove_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
mental_state get_desire (546704 predicate);;;;;;;;;;
bool has_emotion (546706 emotion);;;;;;;;;;
bool remove_uncertainty (546704 predicate);;;;;;;;;;
mental_state get_intention_mental_state (546708 mental_state);;;;;;;;;;
bool has_emotion_with_name (4 name);;;;;;;;;;
bool has_desire (546704 predicate);;;;;;;;;;
bool clear_obligations ;;;;;;;;;;
BDIPlan get_current_plan ;;;;;;;;;;
bool add_ideal_mental_state (546708 mental_state, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool clear_emotions ;;;;;;;;;;
bool add_directly_desire (546708 desire);;;;;;;;;;
bool has_ideal_mental_state (546708 mental_state);;;;;;;;;;
list get_desires (546704 predicate);;;;;;;;;;
bool add_obligation (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
bool remove_social_link_with_agent (11 agent);;;;;;;;;;
bool add_intention (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
mental_state get_belief (546704 predicate);;;;;;;;;;
list get_beliefs_metal_state (546708 mental_state);;;;;;;;;;
action get_intentions_with_name (4 name);;;;;;;;;;
bool has_desire_with_name (4 name);;;;;;;;;;
mental_state get_uncertainty (546704 predicate);;;;;;;;;;
bool add_directly_belief (546708 belief);;;;;;;;;;
bool replace_belief (546704 old_predicate, 546704 predicate);;;;;;;;;;
BDIPlan get_plan (4 name);;;;;;;;;;
bool has_belief (546704 predicate);;;;;;;;;;
mental_state get_current_intention ;0;16;;;;;;;;
bool add_intention_mental_state (546708 mental_state, 2 strength, 1 lifetime);;;;;;;;;;
emotion get_emotion (546706 emotion);;;;;;;;;;
bool has_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool remove_desire (546704 predicate);;;;;;;;;;
mental_state get_intention_with_name (4 name);;;;;;;;;;
bool remove_belief (546704 predicate);1;480;;;;;;;;
bool has_uncertainty_with_name (4 name);;;;;;;;;;
bool add_social_link (546707 social_link);;;;;;;;;;
bool add_ideal (546704 predicate, 2 praiseworthiness, 1 lifetime);;;;;;;;;;
bool add_uncertainty (546704 predicate, 2 strength, 1 lifetime);;;;;;;;;;
bool has_social_link_with_agent (11 agent);;;;;;;;;;
bool remove_all_beliefs (546704 predicate);;;;;;;;;;
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;
bool has_ideal_with_name (4 name);;;;;;;;;;
bool change_familiarity (11 agent, 2 familiarity);;;;;;;;;;
bool add_desire_emotion (546706 emotion, 2 strength, 1 lifetime, 546704 todo);;;;;;;;;;
mental_state get_ideal (546704 predicate);;;;;;;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;
bool has_ideal (546704 predicate);;;;;;;;;;
bool is_current_plan (4 name);;;;;;;;;;
bool remove_obligation (546704 predicate);;;;;;;;;;
bool change_trust (11 agent, 2 trust);;;;;;;;;;
mental_state get_uncertainty_mental_state (546708 mental_state);;;;;;;;;;
bool add_subintention (546708 predicate, 546704 subintentions, 3 add_as_desire);0;16;;;;;;;;
emotion get_emotion_with_name (4 name);;;;;;;;;;
bool clear_intentions ;;;;;;;;;;
bool has_desire_mental_state (546708 mental_state);;;;;;;;;;
init ;0;100;;;;;;;;
plan letsWander intention: wander ;;;;;;;;;;
do wander (amplitude:60.0, speed:speed);;;;;;;;;;
aspect default ;;;;;;;;;601;2300
draw rectangle(float(30),float(15)) color: #orange at: point(location.x,location.y - 20) ;;;;;;;;;123;2300
point(location.x,location.y - 20);;;;;;;;;10;2300
location.x;;;;;;;;;3;2300
location.y - 20;;;;;;;;;1;2300
location.y;;;;;;;;;0;2300
rectangle(float(30),float(15));;;;;;;;;14;2300
float(30);;;;;;;;;9;2300
float(15);;;;;;;;;0;2300
draw string(self.name) color: #black size: 4 at: point(location.x - 10,location.y - 18) ;;;;;;;;;48;2300
point(location.x - 10,location.y - 18);;;;;;;;;9;2300
location.x - 10;;;;;;;;;5;2300
location.x;;;;;;;;;3;2300
location.y - 18;;;;;;;;;2;2300
location.y;;;;;;;;;0;2300
string(self.name);;;;;;;;;6;2300
self.name;;;;;;;;;3;2300
draw circle(float(5)) color: visited ? #green : #blue at: point(location.x,location.y + 20) ;;;;;;;;;154;2300
visited ? #green : #blue;;;;;;;;;0;2300
#green : #blue;;;;;;;;;;
point(location.x,location.y + 20);;;;;;;;;0;2300
location.x;;;;;;;;;0;2300
location.y + 20;;;;;;;;;0;2300
location.y;;;;;;;;;0;2300
circle(float(5));;;;;;;;;87;2300
float(5);;;;;;;;;0;2300
draw string(self.qty_buyers) color: #white size: 4 at: point(location.x - 3,location.y + 22) ;;;;;;;;;39;2300
point(location.x - 3,location.y + 22);;;;;;;;;12;2300
location.x - 3;;;;;;;;;9;2300
location.x;;;;;;;;;6;2300
location.y + 22;;;;;;;;;2;2300
location.y;;;;;;;;;1;2300
string(self.qty_buyers);;;;;;;;;8;2300
self.qty_buyers;;;;;;;;;4;2300
draw buyer_icon size: 40 ;;;;;;;;;230;2300
grid grille width: 100 height: 100 neighbors: 4 ;8;2;;;;;;;;
list<grille> peers ;1;10000;;;;;;;;
-199;;;;;;;;;;
MBTI_model host ;1;10000;;;;;;;;
-29;;;;;;;;;;
list<float> bands ;16;10000;;;;;;;;
int grid_x const: true ;8;10000;;;;;;;;
rgb color <- #white ;8;10000;;;;;;;;
float grid_value ;0;10000;;;;;;;;
int grid_y const: true ;1;10000;;;;;;;;
list<grille> neighbors ;55;10000;;;;;;;;
-199;;;;;;;;;;
init ;1564;1;;;;;;;;
create buyers number: nbbuyers ;94;1;;;;;;;;
create sellers number: nbsellers ;192;2;;;;;;;;
do init (mbti_personality:['E','S','F','J']);94;1;;;;;;;;
self.init(mbti_personality:['E','S','F','J']);;;;;;;;;;
['E','S','F','J'];;;;;;;;;;
create sellers number: nbsellers ;176;2;;;;;;;;
do init (mbti_personality:['E','S','F','P']);88;1;;;;;;;;
self.init(mbti_personality:['E','S','F','P']);;;;;;;;;;
['E','S','F','P'];;;;;;;;;;
create sellers number: nbsellers ;179;2;;;;;;;;
do init (mbti_personality:['E','S','T','J']);89;1;;;;;;;;
self.init(mbti_personality:['E','S','T','J']);;;;;;;;;;
['E','S','T','J'];;;;;;;;;;
create sellers number: nbsellers ;177;2;;;;;;;;
do init (mbti_personality:['E','S','T','P']);88;1;;;;;;;;
self.init(mbti_personality:['E','S','T','P']);;;;;;;;;;
['E','S','T','P'];;;;;;;;;;
create sellers number: nbsellers ;179;2;;;;;;;;
do init (mbti_personality:['E','N','F','J']);89;1;;;;;;;;
self.init(mbti_personality:['E','N','F','J']);;;;;;;;;;
['E','N','F','J'];;;;;;;;;;
create sellers number: nbsellers ;186;2;;;;;;;;
do init (mbti_personality:['E','N','F','P']);93;1;;;;;;;;
self.init(mbti_personality:['E','N','F','P']);;;;;;;;;;
['E','N','F','P'];;;;;;;;;;
create sellers number: nbsellers ;184;2;;;;;;;;
do init (mbti_personality:['E','N','T','J']);92;1;;;;;;;;
self.init(mbti_personality:['E','N','T','J']);;;;;;;;;;
['E','N','T','J'];;;;;;;;;;
create sellers number: nbsellers ;174;2;;;;;;;;
do init (mbti_personality:['E','N','T','P']);87;1;;;;;;;;
self.init(mbti_personality:['E','N','T','P']);;;;;;;;;;
['E','N','T','P'];;;;;;;;;;
create sellers number: nbsellers ;175;2;;;;;;;;
do init (mbti_personality:['I','S','F','J']);87;1;;;;;;;;
self.init(mbti_personality:['I','S','F','J']);;;;;;;;;;
['I','S','F','J'];;;;;;;;;;
create sellers number: nbsellers ;185;2;;;;;;;;
do init (mbti_personality:['I','S','F','P']);92;1;;;;;;;;
self.init(mbti_personality:['I','S','F','P']);;;;;;;;;;
['I','S','F','P'];;;;;;;;;;
create sellers number: nbsellers ;182;2;;;;;;;;
do init (mbti_personality:['I','S','T','J']);91;1;;;;;;;;
self.init(mbti_personality:['I','S','T','J']);;;;;;;;;;
['I','S','T','J'];;;;;;;;;;
create sellers number: nbsellers ;176;2;;;;;;;;
do init (mbti_personality:['I','S','T','P']);88;1;;;;;;;;
self.init(mbti_personality:['I','S','T','P']);;;;;;;;;;
['I','S','T','P'];;;;;;;;;;
create sellers number: nbsellers ;170;2;;;;;;;;
do init (mbti_personality:['I','N','F','J']);85;1;;;;;;;;
self.init(mbti_personality:['I','N','F','J']);;;;;;;;;;
['I','N','F','J'];;;;;;;;;;
create sellers number: nbsellers ;192;2;;;;;;;;
do init (mbti_personality:['I','N','F','P']);96;1;;;;;;;;
self.init(mbti_personality:['I','N','F','P']);;;;;;;;;;
['I','N','F','P'];;;;;;;;;;
create sellers number: nbsellers ;205;2;;;;;;;;
do init (mbti_personality:['I','N','T','J']);102;1;;;;;;;;
self.init(mbti_personality:['I','N','T','J']);;;;;;;;;;
['I','N','T','J'];;;;;;;;;;
create sellers number: nbsellers ;197;2;;;;;;;;
do init (mbti_personality:['I','N','T','P']);98;1;;;;;;;;
self.init(mbti_personality:['I','N','T','P']);;;;;;;;;;
['I','N','T','P'];;;;;;;;;;
reflex stop when: steps = max_steps ;0;2;;;;;;;;
steps = max_steps;0;2;;;;;;;;
do pause ;;;;;;;;;;
reflex count ;0;2;;;;;;;;
set steps value: steps + 1 ;0;2;;;;;;;;
steps + 1;0;2;;;;;;;;
experiment 'MBTI' type: 'gui' benchmark: true title: 'Experiment MBTI' ;;;;;;;;;;
list<MBTI> peers ;;;;;0;1;;;;
-199;;;;;;;;;;
MBTI_model host ;;;;;0;1;;;;
-29;;;;;;;;;;
list<MBTI_model> simulations ;;;;;0;1;;;;
-27;;;;;;;;;;
MBTI_model simulation ;;;;;0;1;;;;
-27;;;;;;;;;;
float minimum_cycle_duration <- 0.0 ;;;;;0;1;;;;
float seed <- 2014.0 ;;;;;0;1;;;;
parameter 'Number of Sellers' category: 'Sellers' var: nbsellers <- 1 among: [1,3,5,10,15,20] ;;;;;;;;;;
[1,3,5,10,15,20];;;0;1;;;;;;
parameter 'Number of Buyers' category: 'Buyers' var: nbbuyers <- 100 among: [10,50,100,200,400,500] ;;;;;;;;;;
[10,50,100,200,400,500];;;0;1;;;;;;
parameter 'Disable time track' category: 'General' var: turn_off_time <- false ;;;;;;;;;;
parameter 'Disable personality change' category: 'General' var: turn_off_personality_probability <- false ;;;;;;;;;;
output ;;;;;;;;;;
display 'map' ;1;2;;;;;0;2;;
grid grille lines: #darkgreen flat: true ;;;;;;;0;4;;
species sellers aspect: default ;;;;;;;0;4;;
species buyers aspect: default ;;;;;;;0;4;;
